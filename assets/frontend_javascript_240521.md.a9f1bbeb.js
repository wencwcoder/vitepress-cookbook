import{_ as s,c as a,o as n,V as l}from"./chunks/framework.35c8bad0.js";const d=JSON.parse('{"title":"引用数据类型之间的转换机制","description":"","frontmatter":{"title":"引用数据类型之间的转换机制","date":"2024-05-21T00:00:00.000Z"},"headers":[],"relativePath":"frontend/javascript/240521.md","lastUpdated":1716905239000}'),o={name:"frontend/javascript/240521.md"},e=l(`<h1 id="引用数据类型之间的转换机制" tabindex="-1">引用数据类型之间的转换机制 <a class="header-anchor" href="#引用数据类型之间的转换机制" aria-label="Permalink to &quot;引用数据类型之间的转换机制&quot;">​</a></h1><h2 id="_1-序言" tabindex="-1">1. 序言 <a class="header-anchor" href="#_1-序言" aria-label="Permalink to &quot;1. 序言&quot;">​</a></h2><p>首先，在聊对象到原始值转换机制前我们需要搞明白两个类型转换方法：<code>valueOf()</code> 和 <code>toString()</code>。</p><h3 id="_1-1-valueof" tabindex="-1">1.1 valueOf() <a class="header-anchor" href="#_1-1-valueof" aria-label="Permalink to &quot;1.1 valueOf()&quot;">​</a></h3><p><strong>在JavaScript中，<code>valueOf</code> 方法通常用于包装对象（Wrapper Objects）中，其中包括 <code>Number</code>、<code>String</code> 和 <code>Boolean</code>。这些包装对象是由 JavaScript 自动创建的，以便处理基本数据类型和对象之间的转换。<code>valueOf</code> 方法被设计为返回原始数据类型的值，以便在需要时进行自动转换。</strong></p><p>需要注意的是，<code>valueOf</code> 方法并非只在包装对象中有用。你可以在自定义对象上实现 <code>valueOf</code> 方法，以便在需要时定义对象的原始值。这样的行为通常是为了更好地控制对象的转换行为。</p><p><strong>Number 对象</strong>：表示数字值，并有一个 <code>valueOf</code> 方法，用于返回原始数值。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> numObj </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Number</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">42</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(numObj</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">valueOf</span><span style="color:#A6ACCD;">())</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">// 42</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><strong>String 对象</strong>：表示字符串，并有一个 <code>valueOf</code> 方法，用于返回原始字符串。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> strObj </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">String</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Hello</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(strObj</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">valueOf</span><span style="color:#A6ACCD;">())</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">// &quot;Hello&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><strong>Boolean 对象</strong>：表示布尔值，并有一个 <code>valueOf</code> 方法，用于返回原始布尔值。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> boolObj </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Boolean</span><span style="color:#A6ACCD;">(</span><span style="color:#FF9CAC;">true</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(boolObj</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">valueOf</span><span style="color:#A6ACCD;">())</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">// true</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="_1-2-tostring" tabindex="-1">1.2 toString() <a class="header-anchor" href="#_1-2-tostring" aria-label="Permalink to &quot;1.2 toString()&quot;">​</a></h3><p><strong>其实引用数据类型转字符串就是调用原型上Object.prototype.toString()方法，但是这个方法对于不同类型的数据进行了分类处理。</strong></p><p><strong>Object.toString()</strong>：默认情况下，如果对象没有覆盖 <code>toString</code> 方法，它会继承 <code>Object.prototype.toString</code> 方法的行为，返回一个由 <code>[object</code> 和对象的 <code>class 属性值</code>和 <code>]</code> 组成的<code>字符串</code>。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> obj </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{};</span></span>
<span class="line"><span style="color:#A6ACCD;">obj</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toString</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">// &#39;[object Object]&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><strong>Array.toString()</strong>：数组对象的 <code>toString</code> 方法返回数组内部元素以逗号拼接的字符串。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> arr </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> [</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">arr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toString</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">// &#39;1,2,3&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><strong>xx.toString()</strong>：对象可以定义自己的 <code>toString</code> 方法，以覆盖默认行为。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> customObject </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">toString</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Custom Object</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#A6ACCD;">customObject</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toString</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">// &quot;Custom Object&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="_2-toprimitive" tabindex="-1">2. ToPrimitive <a class="header-anchor" href="#_2-toprimitive" aria-label="Permalink to &quot;2. ToPrimitive&quot;">​</a></h2><p>ToPrimitive (Object 数据类型转原始数据类型)。在 JavaScript 中，<code>ToPrimitive</code> 是一个抽象操作，用于将一个值转换为对应的原始值。原始值可以是字符串、数字或布尔值。<code>ToPrimitive</code> 的行为是在某些操作中定义的，例如使用 <code>==</code> 运算符进行比较、调用 <code>Object.prototype.toString</code> 方法等。</p><p><code>ToPrimitive</code> 操作是由 ECMAScript 规范(ES5 官方文档) 定义的：<a href="https://es5.github.io/#x9.1" target="_blank" rel="noreferrer">ToPrimitive Conversions官方文档</a>。</p><h3 id="_2-1-toprimitive-obj-number" tabindex="-1">2.1 ToPrimitive(obj, Number) <a class="header-anchor" href="#_2-1-toprimitive-obj-number" aria-label="Permalink to &quot;2.1 ToPrimitive(obj, Number)&quot;">​</a></h3><p>当我们希望将对象转换为数字时，<code>ToPrimitive(obj, Number)</code> 的操作步骤如下：</p><ol><li>如果参数 <code>obj</code> 是基本数据类型，直接返回该值，因为基本数据类型已经是原始值。</li><li>否则，调用对象的 <code>valueOf</code> 方法。如果 <code>valueOf</code> 返回原始值，则直接返回。</li><li>如果 <code>valueOf</code> 方法未返回原始值，则调用对象的 <code>toString</code> 方法。如果 <code>toString</code> 返回原始值，则直接返回。</li><li>如果 <code>toString</code> 方法也未返回原始值，则抛出错误，因为无法将对象转换为数字。</li></ol><h3 id="_2-2-toprimitive-obj-string" tabindex="-1">2.2 ToPrimitive(obj, String) <a class="header-anchor" href="#_2-2-toprimitive-obj-string" aria-label="Permalink to &quot;2.2 ToPrimitive(obj, String)&quot;">​</a></h3><p>当我们希望将对象转换为字符串时，<code>ToPrimitive(obj, String)</code> 的操作步骤如下：</p><ol><li>如果参数 <code>obj</code> 是基本数据类型，直接返回该值，因为基本数据类型已经是原始值。</li><li>否则，调用对象的 <code>toString</code> 方法。如果 <code>toString</code> 返回原始值，则直接返回。</li><li>如果 <code>toString</code> 方法未返回原始值，则调用对象的 <code>valueOf</code> 方法。如果 <code>valueOf</code> 返回原始值，则直接返回。</li><li>如果 <code>valueOf</code> 方法也未返回原始值，则抛出错误，因为无法将对象转换为字符串。</li></ol><h3 id="_2-3-对象转布尔值" tabindex="-1">2.3 对象转布尔值 <a class="header-anchor" href="#_2-3-对象转布尔值" aria-label="Permalink to &quot;2.3 对象转布尔值&quot;">​</a></h3><p>在 JavaScript 中，对象在布尔上下文中被视为 <code>true</code>。因此，对于 <code>ToPrimitive(obj, Boolean)</code> 操作，直接返回 <code>true</code>。</p><h3 id="_2-4-toprimitive-总结" tabindex="-1">2.4 ToPrimitive 总结 <a class="header-anchor" href="#_2-4-toprimitive-总结" aria-label="Permalink to &quot;2.4 ToPrimitive 总结&quot;">​</a></h3><div class="language-markdown line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">markdown</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">ToPrimitive(obj,Number)  ==&gt; Number()</span></span>
<span class="line"><span style="color:#89DDFF;">1.</span><span style="color:#A6ACCD;"> 如果参数obj是数据基本类型，直接返回</span></span>
<span class="line"><span style="color:#89DDFF;">2.</span><span style="color:#A6ACCD;"> 否则，调用 </span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">valueOf</span><span style="color:#89DDFF;">\`</span><span style="color:#A6ACCD;"> 方法,如果得到原始值，则返回 </span></span>
<span class="line"><span style="color:#89DDFF;">3.</span><span style="color:#A6ACCD;"> 否则，调用 </span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">toString</span><span style="color:#89DDFF;">\`</span><span style="color:#A6ACCD;"> 方法,如果得到原始值，则返回</span></span>
<span class="line"><span style="color:#89DDFF;">4.</span><span style="color:#A6ACCD;"> 否则，报错</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">ToPrimitive(obj,String)  ==&gt; String()</span></span>
<span class="line"><span style="color:#89DDFF;">1.</span><span style="color:#A6ACCD;"> 如果参数obj是数据基本类型，直接返回</span></span>
<span class="line"><span style="color:#89DDFF;">2.</span><span style="color:#A6ACCD;"> 否则，调用 </span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">toString</span><span style="color:#89DDFF;">\`</span><span style="color:#A6ACCD;"> 方法,如果得到原始值，则返回</span></span>
<span class="line"><span style="color:#89DDFF;">3.</span><span style="color:#A6ACCD;"> 否则，调用 </span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">valueOf</span><span style="color:#89DDFF;">\`</span><span style="color:#A6ACCD;"> 方法,如果得到原始值，则返回 </span></span>
<span class="line"><span style="color:#89DDFF;">4.</span><span style="color:#A6ACCD;"> 否则，报错</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">ToPrimitive(obj,Boolean)  ==&gt; 直接 true</span></span>
<span class="line"><span style="color:#A6ACCD;">对象转布尔直接就是 true</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h2 id="_3-对象转-number" tabindex="-1">3. 对象转 Number <a class="header-anchor" href="#_3-对象转-number" aria-label="Permalink to &quot;3. 对象转 Number&quot;">​</a></h2><p>来到了这里，如果前面的步骤你已经读懂了，其实这一步只是总结或者说是引擎显示执行的一步，我们如果想让对象转Number类型，只需要调用 Numebr() 方法则行，但是引擎隐式执行的步骤其实还有 <code>valueOf()</code> 以及 <code>ToPrimitive(obj,Number)</code>，其中 <code>ToPrimitive()</code> 方法我们是无法显示使用的，下面我们来对引擎执行的底层机制来进行一个总结梳理。</p><p><strong>To Number Conversions</strong>：我们来看ES5官方文档中对ToNumber方法的定义，<a href="https://es5.github.io/#x9.3" target="_blank" rel="noreferrer">To Number Conversions官方文档</a>。</p><ol><li>首先通过 <code>ToPrimitive</code> 方法使对象类型转换成基本数据类型。</li><li>然后再利用 <code>ToNumber</code> 方法使原始数据类型转换成 Number 类型。</li></ol><h2 id="_4-举一反三-结合实战" tabindex="-1">4. 举一反三 结合实战 <a class="header-anchor" href="#_4-举一反三-结合实战" aria-label="Permalink to &quot;4. 举一反三 结合实战&quot;">​</a></h2><h3 id="_4-1-一元运算符" tabindex="-1">4.1 一元运算符 <a class="header-anchor" href="#_4-1-一元运算符" aria-label="Permalink to &quot;4.1 一元运算符&quot;">​</a></h3><p>在 JavaScript 中，一元加号操作符 <code>+</code> 不仅仅用于数学运算，它还可以用于将一个数据转换为 <code>Number</code> 类型，</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">+</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">1</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">      </span><span style="color:#676E95;font-style:italic;">// Number(&#39;1&#39;)</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;">[])</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">       </span><span style="color:#676E95;font-style:italic;">// 0</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">+{}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">       </span><span style="color:#676E95;font-style:italic;">// NaN</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;">[</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;">])</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">// NaN</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="_4-2-二元运算符" tabindex="-1">4.2 二元运算符 <a class="header-anchor" href="#_4-2-二元运算符" aria-label="Permalink to &quot;4.2 二元运算符&quot;">​</a></h3><p>二元运算符其实也是遵循讲左右两边的数转为 Number 类型进行计算，但是当加号两边有字符串出现时则按字符串进行拼接。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">1</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">   </span><span style="color:#676E95;font-style:italic;">// 11</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">// 1</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">([] </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">   </span><span style="color:#676E95;font-style:italic;">// [object Object]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>对于空数组 <code>[]</code> 和空对象 <code>{}</code>，JavaScript 会尝试将它们转换为字符串并进行字符串拼接。</p><h3 id="_4-3-进阶" tabindex="-1">4.3 进阶 <a class="header-anchor" href="#_4-3-进阶" aria-label="Permalink to &quot;4.3 进阶&quot;">​</a></h3><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 官方文档规定它与任何值，包括自身，进行比较都会返回 false</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">NaN</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">NaN</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">// false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 布尔值 true 会被转换为数字 1</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#FF9CAC;">true</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">   </span><span style="color:#676E95;font-style:italic;">// true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 空对象 {} 会被转换为字符串 &quot;[object Object]&quot;，然后再转换为数字 NaN</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">     </span><span style="color:#676E95;font-style:italic;">// false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 对象之间的比较不会比较它们的内容，而是比较它们在内存中的引用地址</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">// false</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="_5" tabindex="-1">5. [] == ![] <a class="header-anchor" href="#_5" aria-label="Permalink to &quot;5. [] == ![]&quot;">​</a></h2><p>具体步骤：</p><ol><li><strong><code>[] == false</code></strong>：![] <code>的结果是</code> false。</li><li><strong><code>[] == 0</code></strong>：在比较一个对象（例如 []）和布尔值（例如 false）时，JavaScript 会将布尔值转换为数字。</li><li><strong><code>&#39;&#39; == 0</code></strong>：在比较一个对象（例如 []）和数字时，JavaScript 会将对象转换为原始值。</li><li><strong><code>0 == 0</code></strong>：在比较字符串和数字时，JavaScript 会将字符串转换为数字。</li><li><strong><code>true</code></strong>。</li></ol>`,50),p=[e];function t(r,c,i,y,D,C){return n(),a("div",null,p)}const F=s(o,[["render",t]]);export{d as __pageData,F as default};
