import{_ as a,c as e,o as t,V as o}from"./chunks/framework.35c8bad0.js";const u=JSON.parse('{"title":"面试题[JavaScript]","description":"","frontmatter":{"title":"面试题[JavaScript]","date":"2023-05-24T00:00:00.000Z"},"headers":[],"relativePath":"blog/interview/230524.md","lastUpdated":1686748934000}'),r={name:"blog/interview/230524.md"},i=o('<h1 id="面试题-javascript" tabindex="-1">面试题[JavaScript] <a class="header-anchor" href="#面试题-javascript" aria-label="Permalink to &quot;面试题[JavaScript]&quot;">​</a></h1><h2 id="_1-数据类型" tabindex="-1">1. 数据类型 <a class="header-anchor" href="#_1-数据类型" aria-label="Permalink to &quot;1. 数据类型&quot;">​</a></h2><p>JavaScript 中将数据类型分为基本数据类型和引用数据类型，它们其中有一个区别就是存储的位置不同。</p><p>基本数据类型：boolean、string、number、undefined、null、symbol、bigint。</p><p>引用数据类型：array、object。</p><h2 id="_2-typeof-和-instanceof-的区别" tabindex="-1">2. typeof 和 instanceof 的区别 <a class="header-anchor" href="#_2-typeof-和-instanceof-的区别" aria-label="Permalink to &quot;2. typeof 和 instanceof 的区别&quot;">​</a></h2><h2 id="_3-typeof-null-的结果是什么-为什么" tabindex="-1">3. typeof null 的结果是什么？为什么？ <a class="header-anchor" href="#_3-typeof-null-的结果是什么-为什么" aria-label="Permalink to &quot;3. typeof null 的结果是什么？为什么？&quot;">​</a></h2><h2 id="_4-字符串的常用方法" tabindex="-1">4. 字符串的常用方法 <a class="header-anchor" href="#_4-字符串的常用方法" aria-label="Permalink to &quot;4. 字符串的常用方法&quot;">​</a></h2><h2 id="_5-数组的常用方法" tabindex="-1">5. 数组的常用方法 <a class="header-anchor" href="#_5-数组的常用方法" aria-label="Permalink to &quot;5. 数组的常用方法&quot;">​</a></h2><h2 id="_6-对象的常用方法" tabindex="-1">6. 对象的常用方法 <a class="header-anchor" href="#_6-对象的常用方法" aria-label="Permalink to &quot;6. 对象的常用方法&quot;">​</a></h2><h2 id="_7-原型和原型链" tabindex="-1">7. 原型和原型链 <a class="header-anchor" href="#_7-原型和原型链" aria-label="Permalink to &quot;7. 原型和原型链&quot;">​</a></h2><h2 id="_8-闭包和作用域" tabindex="-1">8. 闭包和作用域 <a class="header-anchor" href="#_8-闭包和作用域" aria-label="Permalink to &quot;8. 闭包和作用域&quot;">​</a></h2><p>JavaScript 中常见的作用域包括全局作用域、函数作用域、块级作用域。</p><p>JavaScript 中自由变量的查找是在<strong>函数定义</strong>的地方，向上级作用域查找，不是在执行的地方。</p><p>闭包是作用域应用的特殊场景。常见的闭包使用有两种场景：一种是函数作为参数被传递；一种是函数作为返回值被返回。</p><p>怎么看待闭包的副作用？</p><h2 id="_9-javascript-执行上下文、执行栈和闭包" tabindex="-1">9. JavaScript 执行上下文、执行栈和闭包 <a class="header-anchor" href="#_9-javascript-执行上下文、执行栈和闭包" aria-label="Permalink to &quot;9. JavaScript 执行上下文、执行栈和闭包&quot;">​</a></h2><h2 id="_10-对-this-的理解" tabindex="-1">10. 对 this 的理解 <a class="header-anchor" href="#_10-对-this-的理解" aria-label="Permalink to &quot;10. 对 this 的理解&quot;">​</a></h2><h2 id="_11-new-操作符做了什么" tabindex="-1">11. new 操作符做了什么 <a class="header-anchor" href="#_11-new-操作符做了什么" aria-label="Permalink to &quot;11. new 操作符做了什么&quot;">​</a></h2><h2 id="_12-事件模型" tabindex="-1">12. 事件模型 <a class="header-anchor" href="#_12-事件模型" aria-label="Permalink to &quot;12. 事件模型&quot;">​</a></h2><h2 id="_13-事件循环" tabindex="-1">13. 事件循环 <a class="header-anchor" href="#_13-事件循环" aria-label="Permalink to &quot;13. 事件循环&quot;">​</a></h2><h2 id="_14-for-in-和-for-of-的区别" tabindex="-1">14. for...in 和 for...of 的区别 <a class="header-anchor" href="#_14-for-in-和-for-of-的区别" aria-label="Permalink to &quot;14. for...in 和 for...of 的区别&quot;">​</a></h2><h2 id="_15-commonjs-和-es-module-的区别" tabindex="-1">15. CommonJS 和 ES Module 的区别 <a class="header-anchor" href="#_15-commonjs-和-es-module-的区别" aria-label="Permalink to &quot;15. CommonJS 和 ES Module 的区别&quot;">​</a></h2><h2 id="_16-ecma-标准从提案到发布有几个阶段-哪个阶段是具有里程碑意义的" tabindex="-1">16. ECMA 标准从提案到发布有几个阶段？哪个阶段是具有里程碑意义的 <a class="header-anchor" href="#_16-ecma-标准从提案到发布有几个阶段-哪个阶段是具有里程碑意义的" aria-label="Permalink to &quot;16. ECMA 标准从提案到发布有几个阶段？哪个阶段是具有里程碑意义的&quot;">​</a></h2><p>ECMA标准从提案到发布经历了以下几个阶段：</p><ol><li>Stage 0 - Strawman（草案）：这个阶段是最初的提案阶段，通常由个人或小组提出，并还没有经过正式的标准化流程。提案可能只是一个想法或初步的概念。</li><li>Stage 1 - Proposal（提案）：在这个阶段，提案开始进入正式的标准化流程。提案需要详细说明其功能、语法和语义，并且需要提供示例代码和使用案例。</li><li>Stage 2 - Draft（草稿）：在这个阶段，提案转化为一份详细的草稿，其中包含了具体的语法规范和语义定义。草稿需要经过审查和讨论，并且需要有多个独立实现的证明。</li><li>Stage 3 - Candidate（候选）：在这个阶段，提案已经足够成熟，可以被视为候选标准。这意味着提案已经通过了实际应用并经过广泛的测试和实现。</li><li>Stage 4 - Finished（完成）：在这个阶段，提案被接受为最终的标准，已经准备好发布。提案的规范细节已经完善，并且已经有多个独立实现通过了所有测试。</li></ol><p>这些阶段代表了ECMA标准的不同发展阶段，其中最具里程碑意义的是Stage 4 - Finished（完成）阶段。在这个阶段，提案被接受为最终的标准，意味着它已经经过了广泛的实现、测试和审查，并被认为是稳定和可靠的。完成阶段的标准可以被广泛采用和应用于实际的编程环境中。</p>',27),l=[i];function n(h,s,d,c,_,p){return t(),e("div",null,l)}const b=a(r,[["render",n]]);export{u as __pageData,b as default};
