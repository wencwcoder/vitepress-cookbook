import{_ as s,c as n,o as a,V as l}from"./chunks/framework.35c8bad0.js";const C=JSON.parse('{"title":"WebAPI补充知识","description":"","frontmatter":{"title":"WebAPI补充知识","date":"2024-11-09T00:00:00.000Z"},"headers":[],"relativePath":"frontend/webapi/241109.md","lastUpdated":1731164562000}'),o={name:"frontend/webapi/241109.md"},p=l(`<h1 id="webapi补充知识" tabindex="-1">WebAPI补充知识 <a class="header-anchor" href="#webapi补充知识" aria-label="Permalink to &quot;WebAPI补充知识&quot;">​</a></h1><h2 id="_1-window-onload-和-domcontentloaded-的区别" tabindex="-1">1. window.onload 和 DOMContentLoaded 的区别 <a class="header-anchor" href="#_1-window-onload-和-domcontentloaded-的区别" aria-label="Permalink to &quot;1. window.onload 和 DOMContentLoaded 的区别&quot;">​</a></h2><p>window.onload 和 DOMContentLoaded 是 JavaScript 中用于处理<strong>页面加载完成事件</strong>的两种不同机制，它们之间存在显著的差异。以下是对这两个事件的详细比较：</p><ol><li><p>触发时机</p><ul><li><strong>window.onload</strong>：该事件在整个页面（包括所有的 DOM 元素、样式表、脚本、图片、flash 等）都加载完成后才会触发。这意味着，只有当页面的所有资源都完全加载并准备就绪时，window.onload 事件才会执行相关的回调函数。</li><li><strong>DOMContentLoaded</strong>：该事件在浏览器解析完 HTML 文档的结构（DOM 树）并可以对其进行操作后立即触发。此时，大部分 HTML 标签已经被解析，并且可以访问到它们的属性和内容。然而，这并不包括所有的外部资源，如样式表、图片等。</li></ul></li><li><p>使用场景</p><ul><li><strong>window.onload</strong>：适用于需要确保页面所有资源都加载完毕后再执行某些操作的场景。例如，当需要在页面加载完成后遍历所有图片元素或统计页面加载时间时，可以使用 window.onload 事件。</li><li><strong>DOMContentLoaded</strong>：适用于希望尽早开始操作 DOM，但又不想等待所有外部资源加载完毕的场景。例如，在页面加载早期添加交互效果或初始化某些依赖于 DOM 结构的 JavaScript代码 时，可以使用DOMContentLoaded 事件。</li></ul></li><li><p>用户体验</p><ul><li><strong>window.onload</strong>：由于需要等待所有资源加载完毕，因此可能会导致页面响应时间较长，用户体验相对较差。</li><li><strong>DOMContentLoaded</strong>：由于只需等待 DOM 结构加载完成，因此可以更早地开始执行 JavaScript 代码，提高页面响应速度和用户体验。</li></ul></li><li><p>兼容性</p><ul><li><strong>window.onload</strong>：作为 JavaScript 中的标准事件，window.onload 在所有现代浏览器中都具有良好的兼容性。</li><li><strong>DOMContentLoaded</strong>：虽然 DOMContentLoaded 事件在现代浏览器中得到了广泛支持，但在一些较旧的浏览器中可能需要使用其他方法（如轮询 document.readyState 属性或使用 setTimeout 配合 doScroll 方法等）来模拟实现类似功能。</li></ul></li><li><p>编写个数与执行</p><ul><li><strong>window.onload</strong>：在传统的注册事件方式中，window.onload 只能编写一次。如果有多个 window.onload 方法，只会执行最后一个。如果使用 addEventListener 方法注册 load 事件，则没有此限制，可以添加多个事件监听器，并且它们都会得到执行。</li><li><strong>DOMContentLoaded</strong>：可以使用 addEventListener 方法添加多个回调函数，这些回调函数都会被执行。这使得处理多个依赖于 DOM 结构加载完成的操作变得更加简单和直观。</li></ul></li><li><p>示例代码</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// window.onload</span></span>
<span class="line"><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">onload</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 页面所有资源加载完成后执行的代码</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">页面已完全加载</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 注意：如果尝试添加另一个onload事件处理函数，它会覆盖上面的函数</span></span>
<span class="line"><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">onload</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 这个函数会覆盖上面的onload事件处理函数</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">另一个页面加载完成的回调</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 另外的写法：事件监听器</span></span>
<span class="line"><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addEventListener</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">load</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">event</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">page is fully loaded</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// DOMContentLoaded</span></span>
<span class="line"><span style="color:#A6ACCD;">document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addEventListener</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">DOMContentLoaded</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// DOM结构加载完成后执行的代码</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">DOM已加载</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 可以添加多个DOMContentLoaded事件监听器</span></span>
<span class="line"><span style="color:#A6ACCD;">document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addEventListener</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">DOMContentLoaded</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 这个回调函数也会被执行</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">另一个DOMContentLoaded回调</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div></li></ol>`,4),e=[p];function t(r,c,i,D,F,y){return a(),n("div",null,e)}const A=s(o,[["render",t]]);export{C as __pageData,A as default};
