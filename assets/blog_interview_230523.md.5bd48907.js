import{_ as s,c as n,o as a,V as l}from"./chunks/framework.35c8bad0.js";const C=JSON.parse('{"title":"面试题[HTML5_CSS3]","description":"","frontmatter":{"title":"面试题[HTML5_CSS3]","date":"2023-05-23T00:00:00.000Z"},"headers":[],"relativePath":"blog/interview/230523.md","lastUpdated":1730130757000}'),e={name:"blog/interview/230523.md"},o=l(`<h1 id="面试题-html5-css3" tabindex="-1">面试题[HTML5_CSS3] <a class="header-anchor" href="#面试题-html5-css3" aria-label="Permalink to &quot;面试题[HTML5_CSS3]&quot;">​</a></h1><h2 id="_1-新特性" tabindex="-1">1. 新特性 <a class="header-anchor" href="#_1-新特性" aria-label="Permalink to &quot;1. 新特性&quot;">​</a></h2><h3 id="_1-1-html5-新特性" tabindex="-1">1.1 HTML5 新特性 <a class="header-anchor" href="#_1-1-html5-新特性" aria-label="Permalink to &quot;1.1 HTML5 新特性&quot;">​</a></h3><p>HTML5 作为一种用于构建和呈现 Web 内容的标准技术，引入了许多新特性和功能，为 Web 体验带来了重大革新。以下是 HTML5 的主要新特性：</p><ol><li><strong>语义化标签</strong>：HTML5引入了一些新的语义化标签，如<code>&lt;header&gt;</code>、<code>&lt;footer&gt;</code>、<code>&lt;nav&gt;</code>、<code>&lt;section&gt;</code>、<code>&lt;article&gt;</code>等，用于更好地描述和组织网页内容，使搜索引擎和浏览器能更好地理解和处理页面结构。这些标签使得页面的内容结构化，便于搜索引擎索引和用户理解。</li><li><strong>表单增强</strong>：HTML5引入了新的表单控件类型和属性（如email、tel、date、range等），以及新的表单验证API。这些新特性提供了更好的输入控制和验证，增强了表单的交互性和用户体验。</li><li><strong>视频和音频</strong>：HTML5提供了<code>&lt;video&gt;</code>和<code>&lt;audio&gt;</code>标签，允许在网页上直接嵌入视频和音频文件，无需依赖第三方插件（如Flash）。这消除了对插件的依赖，并提供了更好的可访问性和可定制性。</li><li><strong>画布（Canvas）</strong>：HTML5的<code>&lt;canvas&gt;</code>标签允许使用JavaScript在网页上绘制图形、动画和图像。这提供了一种原生的方法来创建交互式和动态的图形，如游戏和数据可视化。此外，WebGL技术还提供了3D渲染能力，使得开发简单的网页游戏和3D应用成为可能。</li><li><strong>地理定位</strong>：HTML5通过<code>navigator.geolocation</code> API提供了一种在Web应用程序中获取用户位置的标准方法。这使得开发者可以创建基于位置的应用程序，如地图导航、附近的店铺搜索等。</li><li><strong>存储</strong>：HTML5引入了两种新的客户端存储机制，即<code>localStorage</code>和<code>sessionStorage</code>。这些机制允许在浏览器中存储数据，以便在不同页面和会话之间共享和保留数据。这为离线使用和本地缓存提供了更好的支持。此外，HTML5还支持离线应用缓存（Application Cache），使得网页应用在离线状态下也能继续访问。</li><li><strong>Web Workers</strong>：HTML5的Web Workers允许在后台运行脚本，而不会阻塞用户界面。这使得创建多线程Web应用程序成为可能，提高了性能和响应能力。</li><li><strong>拖放</strong>：HTML5的拖放API使得在网页中实现拖放操作变得更加简单。开发者可以使用新的事件和方法来实现从一个元素到另一个元素的拖动和放置，从而实现更直观和交互性的用户界面。</li><li><strong>Web存储</strong>：HTML5引入了一种新的Web存储API，即IndexedDB，它提供了一种在浏览器中存储结构化数据的方法。开发者可以使用这个API来创建复杂的数据库应用程序，如即时通讯和离线阅读等。</li><li><strong>响应式设计</strong>：HTML5使得开发响应式Web设计更加容易。它提供了一些新的CSS功能，如媒体查询和弹性布局，以便根据不同设备和屏幕大小调整和优化网页布局和样式。这消除了为不同设备创建多个网站的需要，简化了开发并确保了一致的用户体验。</li></ol><h3 id="_1-2-css3-新特性" tabindex="-1">1.2 CSS3 新特性 <a class="header-anchor" href="#_1-2-css3-新特性" aria-label="Permalink to &quot;1.2 CSS3 新特性&quot;">​</a></h3><p>CSS3是CSS（层叠样式表）技术的最新演变，它引入了许多新特性来增强设计师和开发人员的设计能力。以下是一些CSS3的新特性：</p><ol><li><strong>选择器</strong>： <ul><li><strong>属性选择器</strong>：选择具有特定属性的元素，例如<code>[attr=value]</code>。</li><li><strong>伪类选择器</strong>：为特定状态的元素添加样式，例如<code>:hover</code>、<code>:active</code>、<code>:visited</code>等。此外，CSS3还新增了动态伪类选择器和目标伪类选择器。</li><li><strong>伪元素选择器</strong>：选择特定部分的元素，例如<code>::before</code>、<code>::after</code>。CSS3支持自定义的伪元素。</li><li><strong>多重选择器</strong>：使用逗号分隔来同时选择多个元素，例如<code>element1, element2</code>。</li></ul></li><li><strong>盒模型</strong>： <ul><li><strong>box-sizing属性</strong>：改变了默认的CSS盒模型，使其更容易进行布局。</li></ul></li><li><strong>颜色和背景</strong>： <ul><li><strong>新增颜色模式</strong>：CSS3增加了对透明度的支持，使用<code>rgba()</code>、<code>hsla()</code>或<code>opacity</code>来设置。同时，CSS3提供了新的颜色空间，如RGBA、HSL和HSLA。</li><li><strong>背景属性</strong>： <ul><li><code>background-size</code>：允许更改背景图像的大小。</li><li><code>background-repeat</code>：能够更改背景图像的重复行为。</li><li><code>background-position</code>：允许在水平和垂直方向上移动背景图像。</li><li><code>background-image</code>：允许多背景图像同时使用。</li><li><code>background-origin</code>：设置背景图的原点。</li><li><code>background-clip</code>：对背景图进行修剪。</li></ul></li></ul></li><li><strong>边框和阴影</strong>： <ul><li><strong>border-radius</strong>：为边框添加圆角效果。</li><li><strong>box-shadow</strong>：为元素添加阴影效果。</li><li><strong>text-shadow</strong>：为文本添加阴影效果。</li></ul></li><li><strong>文字效果</strong>： <ul><li><strong>text-overflow</strong>：处理溢出文本的显示方式。</li><li><strong>文字或图像的变形处理</strong>：使用transform属性实现元素的位移、旋转、缩放等效果。</li></ul></li><li><strong>布局</strong>： <ul><li><strong>Flexbox</strong>：用于一维布局的CSS3新布局模型。</li><li><strong>Grid</strong>：用于二维布局的CSS3新布局模型。</li><li><strong>多列布局（Multi-column Layout）</strong>：CSS3提供了一种创建多列文本或布局的方法，类似于报纸的排版。</li><li><strong>弹性盒子布局</strong>：可以在一行或一列上自动调整元素的位置和大小，以适应不同的屏幕尺寸。</li></ul></li><li><strong>动画和过渡</strong>： <ul><li><strong>过渡（transition）</strong>：CSS3中过渡效果可以让元素的属性值在一段时间内平滑地过渡到新值，从而使得动画效果更加流畅。过渡动画是从一个状态渐渐的过渡到另外一个状态，可以让我们页面更好看、更动感。</li><li><strong>动画（animation）</strong>：CSS3中动画可通过设置多个节点来精确控制一个或一组动画，常用来实现复杂的动画效果。相比较过渡，动画可以实现更多变化、更多控制，连续自动播放等效果。</li></ul></li><li><strong>响应式设计</strong>： <ul><li><strong>媒体查询（Media Queries）</strong>：允许开发人员创建在不同设备和屏幕尺寸上都能良好显示的响应式网页设计。</li></ul></li><li><strong>其他新特性</strong>： <ul><li><strong>对SVG图像的支持</strong>：CSS3增加了对SVG图像的支持。</li><li><strong>自定义字体</strong>：CSS3提供了一种新的方式来定义字体（<code>@font-face</code>）。</li><li><strong>线性渐变和径向渐变</strong>：CSS3支持线性渐变（linear gradients）和径向渐变（radial gradients）。</li><li><strong>calc()函数</strong>：此CSS函数让你在声明CSS属性值时执行一些计算，括号里面可以使用+、-、*、/来进行计算。</li><li><strong>filter属性</strong>：将模糊或颜色偏移等图形效果应用于元素。</li></ul></li></ol><h2 id="_2-html5" tabindex="-1">2. HTML5 <a class="header-anchor" href="#_2-html5" aria-label="Permalink to &quot;2. HTML5&quot;">​</a></h2><h3 id="_2-1-html-代码第一行的作用" tabindex="-1">2.1 HTML 代码第一行的作用 <a class="header-anchor" href="#_2-1-html-代码第一行的作用" aria-label="Permalink to &quot;2.1 HTML 代码第一行的作用&quot;">​</a></h3><p>HTML 代码的第一行通常是文档类型声明（Document Type Declaration，简称 doctype 声明），也称为文档类型定义（Document Type Definition）。<code>&lt;!DOCTYPE&gt;</code> 不是一个 HTML 标签，它是一个指令。它的作用是<strong>告诉浏览器正在使用的 HTML 版本和规范</strong>。</p><p>在 HTML5 中，文档类型声明是这样的：</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;!</span><span style="color:#F07178;">DOCTYPE</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">html</span><span style="color:#89DDFF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="_2-2-html-语义化" tabindex="-1">2.2 HTML 语义化 <a class="header-anchor" href="#_2-2-html-语义化" aria-label="Permalink to &quot;2.2 HTML 语义化&quot;">​</a></h3><p>HTML 语义化是指根据内容的结构和含义（内容语义化），选择合适的 HTML 标签（代码语义化），以更好地表达内容的意义和层次。通俗来讲，就是用正确的标签做正确的事情。</p><p>语义化的优点：</p><ul><li>对机器友好：SEO 友好、提高可访问性（例如屏幕阅读器，帮助视障用户浏览网页）、内容组织（语义化标签有助于搜索引擎爬虫和其他自动化工具更好地抓取和索引网页内容，甚至自动生成目录）。</li><li>对开发者友好：代码可读性、维护和协作。</li></ul><p>在实际开发中，合理选择和使用语义化标签尤为重要。过度使用或滥用语义化标签可能适得其反。开发者应根据内容的实际含义和结构，选择最适合的标签。</p><h3 id="_2-3-html-行内元素、块级元素、空-void-元素" tabindex="-1">2.3 HTML 行内元素、块级元素、空（void）元素 <a class="header-anchor" href="#_2-3-html-行内元素、块级元素、空-void-元素" aria-label="Permalink to &quot;2.3 HTML 行内元素、块级元素、空（void）元素&quot;">​</a></h3><ol><li><p>行内元素（Inline Elements）</p><p>行内元素通常用于文本内部，它们<strong>不会导致文本换行</strong>，而是在内容流中连续展示。这些元素主要用来改变一小块内容的样式或行为，而不影响周围内容的布局。 常见的行内元素包括：</p><ul><li><code>&lt;span&gt;</code></li><li><code>&lt;a&gt;</code></li><li><code>&lt;img&gt;</code></li><li><code>&lt;b&gt;</code>、<code>&lt;i&gt;</code>、<code>&lt;strong&gt;</code></li><li><code>&lt;input&gt;</code>、<code>&lt;select&gt;</code></li></ul></li><li><p>块级元素（Block-level Elements）</p><p>块级元素在页面中通常表现为“块”，会在其前后<strong>自动创建换行</strong>。块级元素用于结构上的组织，它们会占据其父元素（容器）的完整宽度。 常见的块级元素包括：</p><ul><li><code>&lt;div&gt;</code></li><li><code>&lt;p&gt;</code></li><li><code>&lt;h1&gt;</code> ~ <code>&lt;h6&gt;</code></li><li><code>&lt;ul&gt;</code>、<code>&lt;ol&gt;</code>、<code>&lt;li&gt;</code></li></ul></li><li><p>空元素（Empty Elements）</p><p>空元素是那些<strong>没有结束标签、只有开始标签</strong>的元素，因为它们<strong>不包含任何内容</strong>。 常见的空元素包括：</p><ul><li><code>&lt;img&gt;</code></li><li><code>&lt;br&gt;</code></li><li><code>&lt;hr&gt;</code></li><li><code>&lt;input&gt;</code></li><li><code>&lt;meta&gt;</code>、<code>&lt;link&gt;</code></li></ul></li></ol><h3 id="_2-4-html5-离线储存" tabindex="-1">2.4 HTML5 离线储存 <a class="header-anchor" href="#_2-4-html5-离线储存" aria-label="Permalink to &quot;2.4 HTML5 离线储存&quot;">​</a></h3><p>HTML5 引入了一些强大的技术来支持离线存储，使得我们可以创建在无网络状态下也能正常工作的应用。这些技术包括<strong>本地存储（Local Storage）</strong> 和 <strong>离线存储（Application Cache）</strong>。 离线存储指的是：允许开发者指定哪些文件（如 HTML 页面、图像、JS 脚本和 CSS 样式表）应该被浏览器缓存，并能够在没有网络连接时访问它们。</p><p>工作原理：</p><ol><li><p>缓存清单文件：首先，需要创建一个清单文件（通常以 .appcache 扩展名保存），在这个文件中列出要缓存的资源。这个文件必须声明正确的 MIME 类型，即 text/cache-manifest。。</p></li><li><p>引用清单文件：在 HTML 页面的 <code>&lt;html&gt;</code> 标签中使用 manifest 属性引用这个清单文件。例如：</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">html</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">manifest</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">example.appcache</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p>结构清单文件：清单文件的结构通常如下：</p><div class="language-txt line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;"># 2024-01-01 v1.0.0</span></span>
<span class="line"><span style="color:#A6ACCD;">CACHE:</span></span>
<span class="line"><span style="color:#A6ACCD;">/css/style.css</span></span>
<span class="line"><span style="color:#A6ACCD;">/js/app.js</span></span>
<span class="line"><span style="color:#A6ACCD;">/images/logo.png</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">NETWORK:</span></span>
<span class="line"><span style="color:#A6ACCD;">*</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">FALLBACK:</span></span>
<span class="line"><span style="color:#A6ACCD;">/ /offline.html</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div></li></ol><h3 id="_2-5-head-标签" tabindex="-1">2.5 head 标签 <a class="header-anchor" href="#_2-5-head-标签" aria-label="Permalink to &quot;2.5 head 标签&quot;">​</a></h3><p><code>&lt;head&gt;</code> 标签用于<strong>包含文档的元数据</strong>，这些元数据不会在页面上直接显示，但对页面的设置、SEO、样式、脚本和其他行为有重要影响。</p><h3 id="_2-6-meta-标签" tabindex="-1">2.6 meta 标签 <a class="header-anchor" href="#_2-6-meta-标签" aria-label="Permalink to &quot;2.6 meta 标签&quot;">​</a></h3><p><code>&lt;meta&gt;</code> 元素通常用于<strong>提供有关 HTML 文档的元数据</strong>，这些元数据不会显示在页面上，但会被浏览器解析用于页面渲染、搜索引擎优化（SEO）或其他用途。</p><p><code>&lt;meta&gt;</code> 元素通常位于HTML文档的 <code>&lt;head&gt;</code> 部分中，包含的属性有：<code>name</code> 和 <code>content</code>、<code>http-equiv</code>、<code>charset</code>、<code>itemprop</code>：</p><ul><li>如果设置了 <code>name</code>属性，<code>meta</code> 元素提供的是文档级别的元数据，应用于整个页面。</li><li>如果设置了 <code>http-equiv</code>属性，<code>meta</code> 元素则是编译指令，提供的信息与类似命名的 HTTP 头部相同。</li><li>如果设置了 <code>charset</code>属性，<code>meta</code> 元素是一个字符集声明，告诉文档使用哪种字符编码。</li><li>如果设置了 <code>itemprop</code> 属性，<code>meta</code> 元素提供用户定义的元数据。</li></ul><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">meta</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">charset</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">UTF-8</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">meta</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">name</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">description</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">content</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">这是一个页面描述</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">meta</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">name</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">keywords</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">content</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">HTML, CSS, JavaScript</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">meta</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">name</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">author</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">content</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">John Doe</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">meta</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">name</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">viewport</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">content</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">width=device-width, initial-scale=1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">meta</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">name</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">robots</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">content</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">index,follow</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">meta</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">http-equiv</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">refresh</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">content</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">5;URL=http://www.example.com</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">meta</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">http-equiv</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Content-Type</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">content</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">text/html; charset=UTF-8</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">meta</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">http-equiv</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">X-UA-Compatible</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">content</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">IE=edge</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="_2-7-src-和-href-的区别" tabindex="-1">2.7 src 和 href 的区别 <a class="header-anchor" href="#_2-7-src-和-href-的区别" aria-label="Permalink to &quot;2.7 src 和 href 的区别&quot;">​</a></h3><p>HTML 中的 src 和 href 属性虽然都是用于指定资源的地址，但在具体应用标签和资源加载方式上有着明显的区别。</p><p><strong>应用标签不同</strong>：</p><ul><li>这两个属性分别适用于不同的 HTML 标签。误用 href 替代 src（或者反之）可能会导致页面功能无法正常运作，因为浏览器不会对错误的属性做出正确的响应。</li><li>src 属性的作用是 <strong>指定要加载的资源路径</strong>，常出现于 <code>&lt;script&gt;</code>、<code>&lt;img&gt;</code>、<code>&lt;audio&gt;</code>、<code>&lt;video&gt;</code>、<code>&lt;iframe&gt;</code> 等标签中，用于加载 JavaScript 脚本、图像、音频、视频或嵌入的网页文件。</li><li>href 属性的作用是 **指定超链接的目标地址 **或定义文档与外部资源的关联，主要用在 <code>&lt;a&gt;</code>、<code>&lt;link&gt;</code>、<code>&lt;area&gt;</code> 等标签中。例如，当你创建一个超链接 <code>&lt;a&gt;</code> 时，需要用 href 属性指定用户点击后跳转的目标 URL；或者当你在文档头部使用 <code>&lt;link&gt;</code> 标签引入外部样式表时，也是使用 href 属性来指定样式表的地址。</li></ul><p><strong>资源加载方式不同</strong>：</p><ul><li>当浏览器解析到适用于 src 属性的标签（比如 <code>&lt;script&gt;</code> 和 <code>&lt;img&gt;</code>）时，会<strong>暂停</strong>其他资源的下载和处理，直到将该资源加载、编译（如果是 JavaScript）、执⾏（如果是脚本）完成。这种方式称为<strong>阻塞加载</strong>，所以⼀般建议将 JavaScript 脚本放在页面底部。</li><li>而当浏览器识别到适用于 href 属性的标签（比如 <code>&lt;a&gt;</code> 和 <code>&lt;link&gt;</code>）时，会<strong>并⾏</strong>下载资源，不会停⽌对当前⽂档的处理。这种方式称为<strong>非阻塞加载</strong>，浏览器可以同时处理超链接或引入样式表。</li></ul><h3 id="_2-8-script-标签中-defer-和-async-的区别" tabindex="-1">2.8 script 标签中 defer 和 async 的区别 <a class="header-anchor" href="#_2-8-script-标签中-defer-和-async-的区别" aria-label="Permalink to &quot;2.8 script 标签中 defer 和 async 的区别&quot;">​</a></h3><p>defer 和 async 属性用于<strong>控制脚本的加载和执行</strong> ，都是<strong>异步加载外部的 JS 脚本文件，两者都不会阻塞 HTML 的解析</strong>。</p><p>主要区别：</p><ul><li>执行顺序：1、defer 保证脚本按照在 HTML 中出现的顺序执行，一般是在 HTML 解析完成后才执行。2、而 async 则是谁先下载完成谁先执行， async 可能会阻断 HTML 解析以执行脚本。</li><li>适用场景：1、defer 适用于需要在 HTML 完全解析后才能运行的 JS 脚本，尤其是依赖于 DOM 的 JS 脚本。它保证了脚本执行的<strong>顺序性和依赖关系</strong>，适合用于包含多个脚本的页面。2、async 适合 <strong>不依赖于其他脚本</strong> 且 <strong>不被其他脚本依赖</strong> 的独立模块，例如：计数器或广告加载。</li></ul><p>扩展知识：</p><ul><li>页面性能影响：1、<strong>性能优化</strong>：使用 defer 和 async 可以显著改善页面的加载时间。特别是在加载大型脚本或依赖多个脚本的页面时，合理使用这两个属性能减少页面渲染的阻塞时间，提升用户体验。2、<strong>减少首屏加载时间</strong>：由于 async 和 defer 脚本不阻塞 HTML 解析，可以帮助减少首次内容绘制（FCP）和首次有意义绘制（FMP）的时间，在做 SEO 的时候可以运用上这两个属性。</li><li>脚本管理技巧：可以通过现代的模块打包工具如 Webpack 、Vite 管理脚本依赖，并自动为不同的脚本分配最合适的加载策略（例如动态导入）。</li><li>历史兼容性：老旧的浏览器中可能不完全支持或表现不一致。开发时需要考虑到目标用户群体可能使用的浏览器类型。</li></ul><h3 id="_2-9-img-标签-srcset-属性" tabindex="-1">2.9 img 标签 srcset 属性 <a class="header-anchor" href="#_2-9-img-标签-srcset-属性" aria-label="Permalink to &quot;2.9 img 标签 srcset 属性&quot;">​</a></h3><p>在<strong>开发响应式页面</strong>时，经常需要考虑图像在不同设备上的显示效果。srcset 属性就非常有用，它允许我们为 <code>&lt;img&gt;</code> 标签指定多个源图像，并根据设备的屏幕大小和分辨率来选择最合适的图像。这样做的好处是可以避免在小屏设备上加载过大的图像，节省带宽并提升页面的加载速度。</p><p>主要作用：srcset 属性可<strong>为同一图像提供多个文件源和各自的分辨率描述符</strong>。浏览器会根据当前设备的屏幕尺寸（如宽度）和像素密度（如 DPI ）来选择最合适的图像源进行加载。这样，就能 <strong>获得与其设备相匹配的最佳图像体验，而不必加载比所需更大或更高分辨率的图像</strong>，从而节省带宽并加快页面加载速度。用法如下：</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">img</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#C792EA;">src</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">small.jpg</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#C792EA;">srcset</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">small.jpg 500w, medium.jpg 1000w, large.jpg 1500w</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#C792EA;">sizes</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">(max-width: 600px) 500px, (max-width: 900px) 1000px, 1500px</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#C792EA;">alt</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">示例图片</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">/&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>一般情况下，<code>srcset</code> 和 <code>sizes</code> 属性一起使用，因为 sizes 可以帮助浏览器更准确地知道在不同视图下应该显示多大的图像，这样浏览器在选择图像时就更加精准了。</p><h3 id="_2-10-title-和-h1-标签的区别" tabindex="-1">2.10 title 和 h1 标签的区别 <a class="header-anchor" href="#_2-10-title-和-h1-标签的区别" aria-label="Permalink to &quot;2.10 title 和 h1 标签的区别&quot;">​</a></h3><ul><li>位置和作用：<code>&lt;title&gt;</code> 用于定义浏览器工具栏或标签页上的标题，对用户在浏览器外部的可见性和 SEO 影响最大；而 <code>&lt;h1&gt;</code> 用于页面内部，标识主要内容，对页面结构和内部 SEO 有重要作用。</li><li>可见性：<code>&lt;title&gt;</code> 在<strong>页面外可见</strong>，<code>&lt;h1&gt;</code> 在<strong>页面内可见</strong>。</li><li>SEO 重要性：两者都非常重要，但 <code>&lt;title&gt;</code> 更影响搜索引擎结果页中如何展示网页，而 <code>&lt;h1&gt;</code> 则影响搜索引擎对页面内容的理解。</li></ul><h3 id="_2-11-b-和-strong-标签的区别" tabindex="-1">2.11 b 和 strong 标签的区别 <a class="header-anchor" href="#_2-11-b-和-strong-标签的区别" aria-label="Permalink to &quot;2.11 b 和 strong 标签的区别&quot;">​</a></h3><p><code>&lt;b&gt;</code> 和 <code>&lt;strong&gt;</code> 标签都用于文本的样式展示，都能<strong>使文本加粗显示</strong>。但是它们的使用应当根据内容的语义需要来选择。如果文本的加粗<strong>仅仅是为了吸引视觉注意力而没有其他特别的意义</strong>，使用 <code>&lt;b&gt;</code> 标签是合适的。如果文本需要<strong>表达额外的重要性或强调</strong>，则应选择 <code>&lt;strong&gt;</code> 标签（有语义化）。</p><p>样式与可访问性：</p><ul><li>样式：默认情况下，两者都会<strong>使文本加粗</strong>。然而，因为 <code>&lt;strong&gt;</code> 具有额外的语义重要性，所以使用 <code>&lt;strong&gt;</code> 更适合那些需要强调的内容。</li><li>可访问性：屏幕阅读器会读取 <code>&lt;strong&gt;</code> 标签包裹的内容时加重语气，因为这些内容被视为有特别强调的信息。 <code>&lt;b&gt;</code> 标签的内容则仅仅是正常语气，因为它只表示普通的文本样式更改。</li></ul><h3 id="_2-12-i-和-em-标签的区别" tabindex="-1">2.12 i 和 em 标签的区别 <a class="header-anchor" href="#_2-12-i-和-em-标签的区别" aria-label="Permalink to &quot;2.12 i 和 em 标签的区别&quot;">​</a></h3><p><code>&lt;i&gt;</code> 和 <code>&lt;em&gt;</code> 标签都用于改变文本的样式，都是使文本以斜体显示。</p><ul><li><code>&lt;i&gt;</code> 标签只展示样式，不强调内容 。</li><li><code>&lt;em&gt;</code> 标签不仅展示样式，还具有强调文本的语义意义（有语义化）。</li></ul><h3 id="_2-13-iframe-有哪些优点和缺点" tabindex="-1">2.13 iframe 有哪些优点和缺点 <a class="header-anchor" href="#_2-13-iframe-有哪些优点和缺点" aria-label="Permalink to &quot;2.13 iframe 有哪些优点和缺点&quot;">​</a></h3><p><code>&lt;iframe&gt;</code> 是一个非常强大的 HTML 元素，允许我们<strong>在当前网页中嵌入另一个独立的网页</strong>。在集成第三方内容如视频、地图等方面非常有用。但是用了太多的 <code>&lt;iframe&gt;</code> 会影响页面加载速度，并对 SEO 和网页的可访问性带来挑战。</p><p>优点：</p><ol><li>内容隔离：将第三方内容（如视频、地图）嵌入页面，不影响主页面的样式和脚本。</li><li>防止嵌入内容的恶意脚本：可以阻止嵌入内容与主页面直接交互，减少 XSS 风险。</li><li>应用集成：方便集成支付网关、社交媒体等外部服务，无需重构页面。</li><li>简化管理：适用于频繁更新的内容（如新闻、天气），集中管理更简单。</li></ol><p>缺点：</p><ol><li>性能问题：每个 <code>&lt;iframe&gt;</code> 都需要独立的 HTTP 请求，会增加页面加载时间，会阻塞主页面的 onload 事件，特别是多个 <code>&lt;iframe&gt;</code> 时。</li><li>SEO 影响：搜索引擎会忽略 <code>&lt;iframe&gt;</code> 中的内容，影响搜索排名。</li><li>可访问性：对屏幕阅读器不友好，需要适当的标题和描述。</li><li>布局和响应式设计：固定大小的 <code>&lt;iframe&gt;</code> 难以适应不同屏幕，需要额外的 CSS 调整。</li><li>跨域问题：同源政策限制了与不同域的 <code>&lt;iframe&gt;</code> 内容交互，但绕过这些限制可能带来安全风险。</li></ol><h3 id="_2-14-label-标签的作用是什么" tabindex="-1">2.14 label 标签的作用是什么 <a class="header-anchor" href="#_2-14-label-标签的作用是什么" aria-label="Permalink to &quot;2.14 label 标签的作用是什么&quot;">​</a></h3><p><code>&lt;label&gt;</code> 标签用于<strong>提升表单的可用性和可访问性</strong>，它把文本标签和相应的表单控件（如输入框）关联起来，让用户点击标签时，输入焦点自动跳到相应控件上。</p><ul><li>提升可用性：用户点击 <code>&lt;label&gt;</code> 标签时，会自动聚焦到对应的表单控件。</li><li>增强可访问性：对使用屏幕阅读器的用户尤为重要，屏幕阅读器会读取 <code>&lt;label&gt;</code> 的内容，帮助用户理解表单控件的用途。</li></ul><h2 id="_3-css3" tabindex="-1">3. CSS3 <a class="header-anchor" href="#_3-css3" aria-label="Permalink to &quot;3. CSS3&quot;">​</a></h2><h3 id="_3-1-bfc" tabindex="-1">3.1 BFC <a class="header-anchor" href="#_3-1-bfc" aria-label="Permalink to &quot;3.1 BFC&quot;">​</a></h3><p>常见定位方案：普通流 (normal flow)、浮动 (float)、绝对定位 (absolute positioning)。</p><p>概念：BFC (Block Formatting Context)，即<strong>块级格式化上下文</strong>，它是页面中的一块独立渲染区域，并且有一套属于自己的渲染规则。形成一个相对于外界完全独立的空间，让内部的子元素不会影响到外部的元素。</p><p>触发条件：只要元素满足下面任意一条件即可触发 BFC 特性：</p><ul><li>html 根元素</li><li>浮动元素：float 除 none 以外的值</li><li>绝对定位元素：position (absolute、fixed)</li><li>display 为 inline-block、table-cells、flex</li><li>overflow 除了 visible 以外的值 (hidden、auto、scroll)</li></ul><h3 id="_3-2-flex-布局" tabindex="-1">3.2 Flex 布局 <a class="header-anchor" href="#_3-2-flex-布局" aria-label="Permalink to &quot;3.2 Flex 布局&quot;">​</a></h3><p>Flex 布局（也称为弹性盒布局）是 CSS3 中引入的一种布局模式，用于在容器内对子元素进行灵活的定位和对齐。通过使用 Flex 布局，可以实现响应式的页面布局和弹性的元素排列。</p><p>Flex布局的基本概念如下：</p><ol><li>容器（Flex Container）：应用 Flex 布局的父元素称为容器。设置容器的<code>display</code>属性为<code>flex</code>或<code>inline-flex</code>即可启用Flex布局。</li><li>项目（Flex Items）：容器内的子元素称为项目。项目通过容器的 Flex 布局规则进行定位和对齐。容器内的每个元素都成为项目。</li><li>主轴（Main Axis）和交叉轴（Cross Axis）：Flex 布局是二维布局，由主轴和交叉轴组成。主轴是 Flex 容器的排列方向，而交叉轴则是垂直于主轴的方向。</li><li>主轴起点和终点：在主轴上，主轴起点是指主轴的开始位置，而主轴终点则是指主轴的结束位置。这取决于<code>flex-direction</code>属性的值。</li><li>Flex 容器的包裹性（Flex Container&#39;s Wrapping）：当 Flex 项目在主轴上的总长度超过了 Flex 容器的宽度时，可以选择让项目进行换行，这被称为 Flex 容器的包裹性。</li><li>Flex 项目的自动调整（Flex Item&#39;s Auto Adjustment）：Flex 项目在容器中具有自动调整的能力，可以根据剩余空间的分配情况，自动调整项目的尺寸。</li><li>Flex 项目的排序（Flex Item&#39;s Order）：通过<code>order</code>属性，可以控制 Flex 项目的排列顺序。默认情况下，项目的<code>order</code>值为0，可以通过正负值来改变项目的排序顺序。</li></ol><p><code>flex: 1;</code> 是什么意思：</p><p>用于指定一个弹性项（flex item）在可用空间中所占比例的属性。<code>flex: 1</code> 是 <code>flex-grow</code>, <code>flex-shrink</code>, 和 <code>flex-basis</code> 这三个属性的缩写形式。</p><ol><li><code>flex-grow</code> 指定弹性项的放大比例，用于分配剩余空间。在 <code>flex: 1</code> 中，<code>flex-grow</code> 的值为 1，表示弹性项可以根据需要放大，占据父容器中的剩余空间。</li><li><code>flex-shrink</code> 指定弹性项的缩小比例，用于适应容器缩小的情况。在 <code>flex: 1</code> 中，默认值为 1，表示弹性项可以根据需要缩小，以适应父容器的缩小。</li><li><code>flex-basis</code> 指定弹性项的初始大小。在 <code>flex: 1</code> 中，该值为 0%，表示弹性项的初始大小为 0，它将占据剩余空间。</li></ol><p>综合起来，<code>flex: 1</code> 缩写的含义是，弹性项具有相等的放大比例、缩小比例为 1，并且初始大小为 0%，以平均分配剩余空间。</p><h3 id="_3-3-css-hack" tabindex="-1">3.3 CSS Hack <a class="header-anchor" href="#_3-3-css-hack" aria-label="Permalink to &quot;3.3 CSS Hack&quot;">​</a></h3><p>CSS Hack 由于不同厂商的浏览器，比如 Internet Explorer、Safari、Mozilla Firefox、Chrome 等，或者是同一厂商的浏览器的不同版本，如 IE6 和 IE7，对 CSS 的解析认识不完全一样，因此会导致生成的页面效果不一样，得不到我们所需要的页面效果。 这个时候我们就需要针对不同的浏览器去写不同的 CSS，让它能够同时兼容不同的浏览器，能在不同的浏览器中也能得到我们想要的页面效果。而这个针对不同的浏览器写不同的 CSS 代码的过程，就叫 CSS Hack 。</p><p>简单的说，CSS Hack 的目的就是使你的 <strong>CSS 代码兼容不同的浏览器</strong>。当然，我们也可以反过来利用 CSS Hack 为不同版本的浏览器定制编写不同的 CSS 效果。</p><p>然而，需要注意的是，CSS Hack 并不是一种推荐的做法，因为它通常违反了标准的 CSS 规范，并且在不同的浏览器版本中可能不再适用或产生意外的行为。它们可能导致代码的可读性和可维护性降低，而且随着浏览器版本的更新，这些 Hack 可能需要不断调整和更新。相反，更好的做法是使用 CSS 预处理器（如 Sass、Less）或 CSS 后处理器（如 PostCSS）来处理浏览器兼容性问题。这些工具提供了更优雅、可维护的方式来处理不同浏览器之间的样式差异，例如使用 Mixin、变量、autoprefixer 等功能。此外，还可以采用现代的 Web 开发实践，例如使用 CSS 的 Flexbox 和 Grid 布局来取代旧的浮动和表格布局，以减少对 CSS Hack 的需求。</p><p>总之，尽量避免使用 CSS Hack，并采用更可靠、可维护的方法来处理浏览器兼容性问题，以提供更一致且可靠的用户体验。</p><h3 id="_3-4-css-盒子模型" tabindex="-1">3.4 CSS 盒子模型 <a class="header-anchor" href="#_3-4-css-盒子模型" aria-label="Permalink to &quot;3.4 CSS 盒子模型&quot;">​</a></h3><p>CSS 盒子模型是<strong>用于布局和定位 HTML 元素</strong>的一种模型，它将每个元素看作是一个矩形的盒子。这个盒子由四个部分组成：内容（content）、内边距（padding）、边框（border）和外边距（margin）。这些部分围绕着元素的内容构成一个整体，决定了元素在页面中的尺寸和排列方式。</p><p>在CSS中，可以使用 box-sizing 属性来控制盒子模型的计算方式，常见的两个值为 content-box（默认值）和 border-box，分别表示计算宽度和高度时是否包含内边距和边框。</p><p>标准盒子模型：元素设置的宽度和高度（width 和 height）仅包括内容（content）的部分，不包括内边距（padding）、边框（border）和外边距（margin）。</p><p>IE盒子模型：元素设置的宽度和高度（width 和 height）包括了内容（content）、内边距（padding）、边框（border）的部分，但不包括外边距（margin）。</p><h3 id="_3-5-css-选择器及优先级" tabindex="-1">3.5 CSS 选择器及优先级 <a class="header-anchor" href="#_3-5-css-选择器及优先级" aria-label="Permalink to &quot;3.5 CSS 选择器及优先级&quot;">​</a></h3><p>选择器：</p><ol><li>基础选择器：通配符选择器、元素选择器、ID选择器、类选择器。</li><li>层次选择器：后代选择器、子选择器、相邻兄弟选择器、通用兄弟选择器。</li><li>属性选择器：如 <code>[attr=value]</code>。</li><li>伪类选择器：如 <code>:hover</code>、<code>:nth-child()</code>。</li><li>伪元素选择器：如 <code>::before</code>、<code>::after</code>。</li></ol><p>优先级：（从高到低）</p><ol><li>!important 声明的样式的优先级最高。</li><li>内联样式（直接在 HTML 元素上的 <code>style</code> 属性）。</li><li>ID 选择器（如 <code>#id</code>）。</li><li>类选择器、属性选择器和伪类选择器（如 <code>.class</code>、<code>[attr=value]</code>、<code>:hover</code>）。</li><li>元素选择器和伪元素选择器（如 <code>div</code>、<code>::before</code>）。</li><li>通配符选择器（如 <code>*</code>）、后代选择器（如 <code>div p</code>）、子选择器（如 <code>div &gt; p</code>）等组合选择器。</li></ol><h3 id="_3-6-媒体查询" tabindex="-1">3.6 媒体查询 <a class="header-anchor" href="#_3-6-媒体查询" aria-label="Permalink to &quot;3.6 媒体查询&quot;">​</a></h3><h3 id="_3-7-层叠上下文与层叠顺序" tabindex="-1">3.7 层叠上下文与层叠顺序 <a class="header-anchor" href="#_3-7-层叠上下文与层叠顺序" aria-label="Permalink to &quot;3.7 层叠上下文与层叠顺序&quot;">​</a></h3><p>CSS层叠上下文（CSS Stacking Context）是 CSS 中的一个概念，用于描述HTML元素在3D空间中的层叠关系。层叠上下文是一个独立的渲染环境，其中的元素按照一定的规则进行层叠和显示。</p><p>层叠顺序（Stacking Order）是指 HTML 元素在层叠上下文中的显示顺序。层叠顺序决定了元素的覆盖关系，即哪个元素在上层显示，哪个元素在下层显示。</p><p>以下是一些常见的影响层叠顺序的因素，按照优先级从高到低排序：</p><ol><li>元素的定位方式（Positioning）：绝对定位（position: absolute/fixed/sticky）的元素会覆盖其他非定位元素，同样定位方式的元素根据它们在文档流中的位置和层叠上下文的顺序进行层叠。</li><li>元素的 z-index 属性：通过 z-index 属性可以指定元素的层叠级别。具有较高 z-index 值的元素会覆盖具有较低 z-index 值的元素。但仅在同一层叠上下文中才会生效，不同层叠上下文中的 z-index 值无法比较。</li><li>元素的层叠顺序和文档流中的位置：在同一层叠上下文中，后出现的元素会覆盖先出现的元素。元素的层叠顺序也受到元素在文档流中的位置的影响，即后出现的元素会覆盖先出现的元素。</li><li>元素的层叠上下文：每个层叠上下文都形成一个独立的层叠环境，其中的元素在该环境中按照上述规则进行层叠。层叠上下文的嵌套和层叠顺序会影响元素的显示。</li></ol><p>需要注意的是，层叠上下文和层叠顺序是基于元素的视觉呈现而言的，并不一定与 DOM 结构相对应。同时，还有其他一些因素（如 z-index 的 auto 值、opacity 属性等）也可能会影响层叠顺序。了解和正确运用层叠上下文和层叠顺序的概念，可以帮助我们更好地控制和调整元素的显示效果。</p><h3 id="_3-8-水平垂直居中实现方案" tabindex="-1">3.8 水平垂直居中实现方案 <a class="header-anchor" href="#_3-8-水平垂直居中实现方案" aria-label="Permalink to &quot;3.8 水平垂直居中实现方案&quot;">​</a></h3><ul><li>flex 布局</li><li>绝对定位 + margin: auto</li><li>绝对定位 + transform</li></ul><div class="language-css line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">/* flex 布局 */</span></span>
<span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">father</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">display</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> flex</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">justify-content</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> center</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">align-items</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> center</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">son</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/* 绝对定位 + margin: auto */</span></span>
<span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">father</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">position</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> relative</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">son</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">position</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> absolute</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">top</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">left</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">bottom</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">right</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">margin</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> auto</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/* 绝对定位 + transform */</span></span>
<span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">father</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">position</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> relative</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">son</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">position</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> absolute</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">top</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">50%</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">left</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">50%</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">transform</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">translate</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">-50%</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">-50%</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br></div></div><h3 id="_3-9-隐藏元素" tabindex="-1">3.9 隐藏元素 <a class="header-anchor" href="#_3-9-隐藏元素" aria-label="Permalink to &quot;3.9 隐藏元素&quot;">​</a></h3><div class="language-css line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">/* 脱离文档流、无法响应事件、回流、重绘 */</span></span>
<span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">hidden-element-1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">display</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> none</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/* 占据文档流、响应事件、不回流、重绘 */</span></span>
<span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">hidden-element-2</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">visibility</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> hidden</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/* 占据文档流、响应事件、不回流、重绘 */</span></span>
<span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">hidden-element-3</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">opacity</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h3 id="_3-10-画一条-0-5px-的线" tabindex="-1">3.10 画一条 0.5px 的线 <a class="header-anchor" href="#_3-10-画一条-0-5px-的线" aria-label="Permalink to &quot;3.10 画一条 0.5px 的线&quot;">​</a></h3><ul><li><strong>采用 transform: scale() 的方式</strong>，该方法用来定义元素的2D缩放转换：</li></ul><div class="language-css line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">transform: scale(0</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">5</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> 0</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">5</span><span style="color:#A6ACCD;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li><strong>采用 meta viewport 的方式</strong>：这样就能缩放到原来的0.5倍，如果是1px那么就会变成0.5px。viewport 只针对于移动端，只在移动端上才能看到效果。</li></ul><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">meta</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">name</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">viewport</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">content</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">width=device-width, initial-scale=0.5, minimum-scale=0.5, maximum-scale=0.5</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> /&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="_3-11-移动端-1px-问题" tabindex="-1">3.11 移动端 1px 问题 <a class="header-anchor" href="#_3-11-移动端-1px-问题" aria-label="Permalink to &quot;3.11 移动端 1px 问题&quot;">​</a></h3><h3 id="_3-12-动态修改伪元素样式" tabindex="-1">3.12 动态修改伪元素样式 <a class="header-anchor" href="#_3-12-动态修改伪元素样式" aria-label="Permalink to &quot;3.12 动态修改伪元素样式&quot;">​</a></h3><p>需求：伪元素高度使用 data 中的变量，对其进行动态修改。</p><p>实现：1、css / less 中使用 <strong>css 变量</strong>的方式；2、结合 vue 中动态<strong>行内样式</strong>进行伪元素动态属性设置。</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">class</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">test</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">span</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">:style</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">{ &#39;--width&#39;: widthVar }</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">class</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">span</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">hello earth</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">span</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">@click</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">changeWidth</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">改变宽度</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">data</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      widthVar</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">100px</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">methods</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">changeWidth</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">widthVar</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">200px</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">style</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">scoped</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">span</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">text-align</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> center</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">position</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> relative</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">width</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">var</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">--width</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">span</span><span style="color:#89DDFF;">::</span><span style="color:#C792EA;">after</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">content</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">display</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> block</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">position</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> absolute</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">left</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">100%</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">width</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">var</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">--width</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">height</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">var</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">--width</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">border-radius</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">50%</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">border</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2px</span><span style="color:#A6ACCD;"> solid black</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">      </span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">style</span><span style="color:#89DDFF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br></div></div><h3 id="_3-13-span-标签设置-margin" tabindex="-1">3.13 span 标签设置 margin <a class="header-anchor" href="#_3-13-span-标签设置-margin" aria-label="Permalink to &quot;3.13 span 标签设置 margin&quot;">​</a></h3><p>当你为一个 <code>&lt;span&gt;</code> 标签设置 <code>margin</code> 时，你需要了解 <code>&lt;span&gt;</code> 是一个内联元素（inline element），并且内联元素对垂直边距（<code>margin-top</code> 和 <code>margin-bottom</code>）的响应与块级元素（block-level elements）或内联块级元素（inline-block elements）不同。</p><p>在大多数浏览器中，直接为内联元素设置垂直边距是无效的，因为内联元素不会在其前后产生换行，因此垂直边距没有视觉上的效果。然而，水平边距（<code>margin-left</code> 和 <code>margin-right</code>）对内联元素是有效的。</p><h3 id="_3-14-使用-link-和-import-引用-css-的区别" tabindex="-1">3.14 使用 link 和 @import 引用 CSS 的区别 <a class="header-anchor" href="#_3-14-使用-link-和-import-引用-css-的区别" aria-label="Permalink to &quot;3.14 使用 link 和 @import 引用 CSS 的区别&quot;">​</a></h3><p>在 HTML 文档中，可以通过 <code>&lt;link&gt;</code> 标签或 CSS 中的 @import 语句来引用外部样式表。</p><table><thead><tr><th>特性</th><th style="text-align:center;"><code>&lt;link&gt;</code></th><th style="text-align:center;">@import</th></tr></thead><tbody><tr><td>用法</td><td style="text-align:center;">在 HTML 文档的 <code>&lt;head&gt;</code> 部分使用</td><td style="text-align:center;">在 CSS 文件或 <code>&lt;style&gt;</code> 标签内使用</td></tr><tr><td>加载顺序</td><td style="text-align:center;">页面加载时立即加载样式表</td><td style="text-align:center;">在加载包含它的 CSS 文件后加载</td></tr><tr><td>浏览器支持</td><td style="text-align:center;">支持所有主流浏览器</td><td style="text-align:center;">支持 IE5+ 和所有现代浏览器</td></tr><tr><td>性能</td><td style="text-align:center;">加载并行进行，速度较快</td><td style="text-align:center;">加载顺序依赖，速度较慢</td></tr><tr><td>DOM 可操作性</td><td style="text-align:center;">可通过 JavaScript 操作和控制</td><td style="text-align:center;">不易通过 JavaScript 操作</td></tr><tr><td>样式权重</td><td style="text-align:center;">样式权重相同</td><td style="text-align:center;">样式权重相同</td></tr><tr><td>本质</td><td style="text-align:center;">HTML 标签</td><td style="text-align:center;">CSS 语法</td></tr></tbody></table><h3 id="_3-15-为什么有时候用-translate-来改变位置而不是定位" tabindex="-1">3.15 为什么有时候用 translate 来改变位置而不是定位 <a class="header-anchor" href="#_3-15-为什么有时候用-translate-来改变位置而不是定位" aria-label="Permalink to &quot;3.15 为什么有时候用 translate 来改变位置而不是定位&quot;">​</a></h3><p>在前端开发中，我们有时候会选择使用 <code>translate</code> 来改变元素的位置，而不是使用传统的定位方式（如 <code>top</code>、<code>left</code>、<code>right</code>、<code>bottom</code>），主要是因为 <strong>性能</strong> 方面的考虑。</p><p>具体来说，<code>translate</code> 是通过 CSS transforms 实现的，它操作的是元素的渲染层，而不是布局层。这样一来，浏览器就不会因为位置的改变而重新计算布局（reflow），从而提高渲染性能。</p><ol><li>Reflow 与 Repaint： <ul><li><code>Reflow</code>（重排）：是指浏览器在 DOM 发生变化时重新计算元素的位置和几何形状。当使用定位属性（如 <code>top</code>、<code>left</code>）改变元素位置时，就会触发 Reflow，这在页面复杂时会非常消耗性能。</li><li><code>Repaint</code>（重绘）：是指元素的外观发生变化（如背景颜色、边框等）时，需要重新绘制这些元素，但不涉及重新计算布局。Repaint 的开销相对较小。</li></ul></li><li>Transform - Translate： <ul><li><code>translate</code> 是 CSS Transform 属性的一部分，通过矩阵变换（matrix transformations）来操作元素的视觉位置。这个过程是在合成层（compositing layer）完成的，不会影响文档的布局结构，所以不会触发 Reflow，只会造成 Repaint。</li></ul></li><li>硬件加速： <ul><li>使用 <code>translate</code> 通常能够借助 GPU 加速，而传统的定位方式则主要依赖于 CPU。在渲染大量图形和动画时，GPU 的效率是显著优于 CPU 的，能带来更流畅的视觉效果。</li></ul></li><li>性能优化的常见实践： <ul><li>在涉及到动画和频繁调整位置的场景下，应该优先考虑使用 <code>transform: translate</code>，而不是 <code>top</code> 或 <code>left</code>。</li><li>合理利用 <code>will-change</code> 属性，告知浏览器即将发生的一些变化（如 <code>transform</code> 或 <code>opacity</code>），预先做一些优化处理，提高动画的流畅度。</li></ul></li></ol><h3 id="_3-16-margin-和-padding-的使用场景" tabindex="-1">3.16 margin 和 padding 的使用场景 <a class="header-anchor" href="#_3-16-margin-和-padding-的使用场景" aria-label="Permalink to &quot;3.16 margin 和 padding 的使用场景&quot;">​</a></h3><p>margin 和 padding 是 CSS 中用来<strong>控制元素与其周围环境之间距离</strong>的两个重要属性。简单区别一下：</p><ol><li>margin（外边距）用于控制元素与其他元素之间的距离，它是在元素的外部起作用。常用于创建元素之间的间隔。</li><li>padding（内边距）用于控制元素内容与其边框之间的距离，它是在元素的内部起作用。常用于增加元素内部的间距。</li></ol><p>要更深入地理解 margin 和 padding，还有一些重要的补充点：</p><ul><li>合并外边距（Margin Collapse）：相邻块级元素的<strong>垂直外边距</strong>在某些情况下会合并为一个。比如，两个相邻段落的上下 margin 会合并成取其最大值。有时这会导致布局问题，需要特别关注和处理。</li><li>负值 margin：Margin 属性是可以设负值的，它会直接影响到元素的位置。而这在 padding 中是不可用的。因此，负值 margin 适合用于一些特殊的布局需求，比如让某个元素向上或向左靠近另一个元素。</li><li>减少重绘和重排：对于性能优化来说，尽量避免频繁修改会引起重绘或重排的属性，如 margin 和 padding。这是因为浏览器在处理这些更改时需要重新计算布局和渲染画面。</li></ul><h2 id="_4-css3-属性" tabindex="-1">4. CSS3 属性 <a class="header-anchor" href="#_4-css3-属性" aria-label="Permalink to &quot;4. CSS3 属性&quot;">​</a></h2><h3 id="_4-1-css-中可继承与不可继承属性有哪些" tabindex="-1">4.1 CSS 中可继承与不可继承属性有哪些 <a class="header-anchor" href="#_4-1-css-中可继承与不可继承属性有哪些" aria-label="Permalink to &quot;4.1 CSS 中可继承与不可继承属性有哪些&quot;">​</a></h3><p>可继承属性会从父元素传递给子元素，而不可继承属性则只应用于定义它们的元素。一般来说，可继承属性主要涉及文本和字体相关的属性，以及一些布局相关属性。</p><p>可继承属性：</p><ul><li>color</li><li>font-family</li><li>font-size</li><li>font-style</li><li>font-variant</li><li>font-weight</li><li>letter-spacing</li><li>line-height</li><li>text-align</li><li>text-indent</li><li>text-transform</li><li>visibility</li><li>white-space</li><li>word-spacing</li></ul><p>不可继承属性：</p><ul><li>background</li><li>border</li><li>display</li><li>width</li><li>height</li><li>margin</li><li>padding</li><li>position</li><li>top, right, bottom, left</li><li>z-index</li><li>float</li><li>clear</li></ul><h3 id="_4-2-pointer-events" tabindex="-1">4.2 pointer-events <a class="header-anchor" href="#_4-2-pointer-events" aria-label="Permalink to &quot;4.2 pointer-events&quot;">​</a></h3><p>在实际的业务场景下，你可以使用 <code>pointer-events</code> 属性来实现一些常见的交互需求。下面是一些使用 <code>pointer-events</code> 的示例：</p><ul><li>阻止元素上的点击事件：如果你有一个遮罩层或禁用状态的元素，你可以将其 <code>pointer-events</code> 属性设置为 <code>none</code>，这样它将无法接收鼠标点击事件。这在避免误操作或阻止与特定元素的交互时很有用。</li></ul><div class="language-css line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">mask</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">pointer-events</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> none</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li>创建一个可点击但透明的元素：有时你可能想要创建一个看似透明的区域，但仍然希望它能接收鼠标事件。你可以将元素的背景设置为透明，并将 <code>pointer-events</code> 属性设置为 <code>auto</code> 或 <code>visible</code>。</li></ul><div class="language-css line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">transparent-element</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">background</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> transparent</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">pointer-events</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> auto</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">/* 或 pointer-events: visible; */</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li>穿透事件到下层元素：如果你有一个位于其他元素上方的浮动层，并且希望鼠标事件能够透过该浮动层传递到下方的元素上，你可以将浮动层的 <code>pointer-events</code> 属性设置为 <code>none</code>。这样，鼠标事件将直接传递到位于浮动层下方的其他元素上，而不会被浮动层所阻挡。</li></ul><div class="language-css line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">float-layer</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">pointer-events</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> none</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="_4-3-filter" tabindex="-1">4.3 filter <a class="header-anchor" href="#_4-3-filter" aria-label="Permalink to &quot;4.3 filter&quot;">​</a></h3><p><code>filter: grayscale(100%);</code> 是一条 CSS 样式规则，用于将元素转换为完全灰度（黑白）效果。</p><p>解释：<code>filter</code> 是 CSS 的滤镜属性，用于对元素应用视觉效果；<code>grayscale()</code> 是滤镜函数之一，用于将元素转换为灰度；<code>100%</code> 是 <code>grayscale()</code> 函数的参数，表示将元素转换为完全灰度，即黑白效果。</p><p>定义：<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/filter-function" target="_blank" rel="noreferrer">filter-function</a>、<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/filter" target="_blank" rel="noreferrer">filter</a>。</p><p>多数平台参数都是0.95 - <code>filter: grayscale(0.95);</code> ，跟别人设置一样准没错。</p><h3 id="_4-4-z-index" tabindex="-1">4.4 z-index <a class="header-anchor" href="#_4-4-z-index" aria-label="Permalink to &quot;4.4 z-index&quot;">​</a></h3><h3 id="_4-5-transition-和-animation-的区别" tabindex="-1">4.5 transition 和 animation 的区别 <a class="header-anchor" href="#_4-5-transition-和-animation-的区别" aria-label="Permalink to &quot;4.5 transition 和 animation 的区别&quot;">​</a></h3><p>CSS 中 <code>transition</code> 和 <code>animation</code> 都用于<strong>在元素样式改变时实现平滑过渡</strong>，但它们有一些关键区别：</p><ol><li><code>transition</code> 是用于定义元素属性变化时的过渡效果。它需要触发某个事件（如鼠标悬停、点击等）来启动。简单来说，<code>transition</code> 只能<strong>在两个状态之间转换</strong>，并且<strong>需要一个触发条件</strong>。</li><li><code>animation</code> 提供了更多的控制选项，它允许我们定义<strong>关键帧</strong>（keyframes），并且可以在复数个状态之间进行变化。<code>animation</code> 可以在页面加载时自动开始运行，<strong>不需要特定的触发事件</strong>。</li></ol><h3 id="_4-6-line-height" tabindex="-1">4.6 line-height <a class="header-anchor" href="#_4-6-line-height" aria-label="Permalink to &quot;4.6 line-height&quot;">​</a></h3><p><code>line-height</code> 是 CSS 中一个很重要的属性，它主要用于控制行高，也就是<strong>多行文本之间的垂直间距</strong>。这个属性对文本的可读性和布局有很大影响。<code>line-height</code> 的主要作用是定义行与行之间的距离，它不仅影响文本的垂直空间，还能间接作用于元素的高度计算。</p><p>常见的 <code>line-height</code> 赋值方式有：</p><ol><li><strong>数字值</strong>：例如 <code>line-height: 1.5</code>，这种方式是一个无单位的乘数，会根据字体大小计算实际的行高。</li><li><strong>百分比</strong>：例如 <code>line-height: 150%</code>，这种方式以当前字体大小为基准，设置的百分比值作为行高。</li><li><strong>长度值</strong>：例如 <code>line-height: 20px</code>，直接使用具体的长度单位来设置行高。</li><li><strong>关键字</strong>：常见的关键字有 <code>normal</code>，浏览器会根据默认算法来计算行高，一般接近1.2到1.4倍的字体大小。</li></ol><h2 id="_5-html5-css3-拓展知识" tabindex="-1">5. HTML5_CSS3 拓展知识 <a class="header-anchor" href="#_5-html5-css3-拓展知识" aria-label="Permalink to &quot;5. HTML5_CSS3 拓展知识&quot;">​</a></h2><h3 id="_5-1-canvas-和-svg-的区别" tabindex="-1">5.1 Canvas 和 SVG 的区别 <a class="header-anchor" href="#_5-1-canvas-和-svg-的区别" aria-label="Permalink to &quot;5.1 Canvas 和 SVG 的区别&quot;">​</a></h3><p>Canvas 和 SVG <strong>都是用于在网页上绘制图形的技术</strong>，但它们在实现方式、性能和使用场景上有明显的区别。Canvas 是<strong>基于像素的即时绘制技术</strong>，适合频繁更新和复杂动画，而 SVG 是<strong>基于矢量的图形格式</strong>，适合需要无损缩放和高分辨率的静态图形。</p><ol><li>渲染方式： <ul><li>Canvas：逐像素渲染，适合实时动态绘制。</li><li>SVG：基于矢量描述，适合静态和简单的动态绘制。</li></ul></li><li>性能： <ul><li>Canvas：高性能，适合频繁更新的图形和复杂动画。</li><li>SVG：在处理复杂图形时，性能可能会下降。</li></ul></li><li>交互和 DOM 集成： <ul><li>Canvas：不具备内置的 DOM 交互，需要额外的事件处理代码。</li><li>SVG：每个图形元素都是 DOM 节点，天然支持交互和事件处理。</li></ul></li><li>使用场景： <ul><li>Canvas：游戏开发、实时数据可视化、复杂动画。</li><li>SVG：图标、标志、图表、需要高分辨率和可缩放性的图形。</li></ul></li></ol><h3 id="_5-2-元素替换概念" tabindex="-1">5.2 元素替换概念 <a class="header-anchor" href="#_5-2-元素替换概念" aria-label="Permalink to &quot;5.2 元素替换概念&quot;">​</a></h3><p>CSS中的元素替换概念是指<strong>一种特殊的元素分类方式</strong>，主要用于区分元素内容的展示方式。在CSS中，根据元素内容的展现方式，我们可以将元素分为替换元素和非替换元素。</p><p><strong>替换元素是指在CSS中，元素的内容不是由CSS所控制的，而是由外部资源来决定的</strong>。</p><p>替换元素：</p><ol><li>定义：替换元素是指元素内容的展现不是由CSS直接控制的，而是外观渲染独立于CSS的外部对象。浏览器根据元素的<strong>标签和属性来决定元素的具体显示内容</strong>。</li><li>特性： <ul><li>替换元素的内容可以被改变，通常通过修改元素的某个属性值来实现，如<code>&lt;img&gt;</code>的<code>src</code>属性或<code>&lt;input&gt;</code>的<code>type</code>属性。</li><li>替换元素可以具有固有尺寸、HTML尺寸和CSS尺寸。尺寸设置时，权重关系为CSS尺寸&gt;HTML尺寸&gt;固有尺寸。</li><li>替换元素的尺寸通常由内部元素决定，但也可以通过CSS手动更改设置。</li><li>替换元素可以撑开行框，但是不影响行高。它们的垂直方向属性（如margin、border、padding）可以撑开行框。</li></ul></li><li><strong>常见替换元素</strong>：<code>&lt;img&gt;</code>、<code>&lt;input&gt;</code>、<code>&lt;textarea&gt;</code>、<code>&lt;video&gt;</code>、<code>&lt;object&gt;</code>、<code>&lt;iframe&gt;</code>等。</li></ol><p>非替换元素：</p><ol><li><strong>定义</strong>：非替换元素是指那些直接将内容展现给用户的元素，其内容的展现由CSS直接控制。</li><li><strong>特性</strong>：非替换元素的内容在HTML代码中直接可见，如文本、标题等。</li><li><strong>常见非替换元素</strong>：<code>&lt;h1&gt;</code>、<code>&lt;p&gt;</code>、<code>&lt;div&gt;</code>、<code>&lt;span&gt;</code>等。</li></ol><p>总结：替换元素和非替换元素的主要区别在于它们的内容展现方式。替换元素的内容由浏览器根据元素的标签和属性决定，而非替换元素的内容则直接由CSS控制。在样式设计和布局时，理解这两种元素的区别有助于更好地应用CSS规则，实现所需的视觉效果。</p><h3 id="_5-3-css-sprites" tabindex="-1">5.3 CSS Sprites <a class="header-anchor" href="#_5-3-css-sprites" aria-label="Permalink to &quot;5.3 CSS Sprites&quot;">​</a></h3><p>CSS Sprites（雪碧图）是一种网页<strong>性能优化</strong>的技术。其核心思想是<strong>将多个小图标合并到一张大图中</strong>，通过 CSS 来控制显示具体的图标部分。这种技术能够有效减少 HTTP 请求次数，从而提高页面加载速度。</p><ol><li>关键点总结如下： <ul><li><strong>减少 HTTP 请求</strong>：每次加载一个图像都会发起一次 HTTP 请求，合并图像后只需一次请求，就能获取所需的所有图像。</li><li><strong>节省带宽</strong>：由于多个图像合并为一个文件，服务器和客户端之间传输的数据包数更少，减少了服务器的开销和客户端解析图像的时间。</li><li><strong>改善用户体验</strong>：页面加载速度更快，可提升用户体验，尤其是在网络条件不佳的情况下。</li></ul></li><li>实现方式： <ul><li>需要一张包含多个小图标的大图，以及对应的 CSS 样式。每个图标通过调整 <code>background-position</code> 属性来显示其在大图中的正确位置。</li></ul></li><li>适用场景： <ul><li>合适使用 CSS Sprites 的场景通常是较多的小图标被频繁使用的地方，例如导航栏、按钮等。但是对于大图或者背景图，使用 CSS Sprites 并不合适。而且过于复杂的雪碧图可能会导致维护和更新的成本增加。</li></ul></li><li>常见问题： <ul><li>图片位置偏移：由于 <code>background-position</code> 属性的精度非常重要，稍有偏差便可能导致图像显示错误，因此在生成雪碧图时，要格外注意位置的准确性。</li><li>图像内容更新频繁：如果某些图标需要频繁更新，那么每次都要更新整个雪碧图，这会导致维护成本较高。</li></ul></li></ol><h3 id="_5-4-css-单位" tabindex="-1">5.4 CSS 单位 <a class="header-anchor" href="#_5-4-css-单位" aria-label="Permalink to &quot;5.4 CSS 单位&quot;">​</a></h3><p>rem、em、px、%、vw、vh...</p><h3 id="_5-5-物理像素-逻辑像素和像素密度" tabindex="-1">5.5 物理像素，逻辑像素和像素密度 <a class="header-anchor" href="#_5-5-物理像素-逻辑像素和像素密度" aria-label="Permalink to &quot;5.5 物理像素，逻辑像素和像素密度&quot;">​</a></h3><ul><li>物理像素（Physical Pixel）：是设备屏幕上实际存在的<strong>最小显示单元</strong>。这是硬件层面上屏幕实际的物理点。现代设备通常拥有非常高的物理像素密度，比如 iPhones，尤其是带 Retina 显示屏的设备。</li><li>逻辑像素（Logical Pixel）：也叫设备独立像素（Device Independent Pixel，DIP），这<strong>是开发和设计时使用的抽象单位</strong>，它与物理像素的比例由设备设置决定。例如，iPhone上的逻辑像素与物理像素比例可能是1:2或1:3。</li><li>像素密度（Pixel Density）：是<strong>每英寸拥有的物理像素数</strong>，通常用PPI（Pixels Per Inch）表示。像素密度越高，显示效果越细腻。</li></ul><p>在移动端开发中使用 @3x, @2x 这种图片，是为了适应不同设备的屏幕分辨率和像素密度，确保在高像素密度的设备上，图片显示依然清晰而不会模糊。@2x 和 @3x 是对像素密度为2倍和3倍的设备提供的高分辨率图片资源。</p><h3 id="_5-6-css-预处理器-后处理器" tabindex="-1">5.6 CSS 预处理器 / 后处理器 <a class="header-anchor" href="#_5-6-css-预处理器-后处理器" aria-label="Permalink to &quot;5.6 CSS 预处理器 / 后处理器&quot;">​</a></h3><p>CSS 预处理器和后处理器是用于提升 CSS 编写和管理效率的工具。</p><ul><li>CSS 预处理器如 Sass、Less 可提供变量、嵌套、混合等高级功能来编写更具<strong>结构性和模块化</strong>的 CSS 代码。</li><li>CSS 后处理器如 PostCSS 则侧重于<strong>通过插件机制自动优化和增强 CSS</strong>，例如自动添加浏览器前缀等。这些工具的使用可以使 CSS 代码更简洁、易维护，同时提升开发效率和项目的可扩展性。</li></ul>`,183),t=[o];function p(r,c,i,d,D,F){return a(),n("div",null,t)}const g=s(e,[["render",p]]);export{C as __pageData,g as default};
