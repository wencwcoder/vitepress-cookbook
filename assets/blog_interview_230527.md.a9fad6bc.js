import{_ as s,c as a,o as n,V as l}from"./chunks/framework.35c8bad0.js";const d=JSON.parse('{"title":"面试题[Vue]","description":"","frontmatter":{"title":"面试题[Vue]","date":"2023-05-27T00:00:00.000Z"},"headers":[],"relativePath":"blog/interview/230527.md","lastUpdated":1713966732000}'),e={name:"blog/interview/230527.md"},p=l(`<h1 id="面试题-vue" tabindex="-1">面试题[Vue] <a class="header-anchor" href="#面试题-vue" aria-label="Permalink to &quot;面试题[Vue]&quot;">​</a></h1><h2 id="_1-vue2-相关" tabindex="-1">1. Vue2 相关 <a class="header-anchor" href="#_1-vue2-相关" aria-label="Permalink to &quot;1. Vue2 相关&quot;">​</a></h2><h3 id="_1-1-计算属性、方法" tabindex="-1">1.1 计算属性、方法 <a class="header-anchor" href="#_1-1-计算属性、方法" aria-label="Permalink to &quot;1.1 计算属性、方法&quot;">​</a></h3><h3 id="_1-2-侦听器" tabindex="-1">1.2 侦听器 <a class="header-anchor" href="#_1-2-侦听器" aria-label="Permalink to &quot;1.2 侦听器&quot;">​</a></h3><h3 id="_1-3-生命周期钩子" tabindex="-1">1.3 生命周期钩子 <a class="header-anchor" href="#_1-3-生命周期钩子" aria-label="Permalink to &quot;1.3 生命周期钩子&quot;">​</a></h3><p><a href="https://link.juejin.cn/?target=https%3A%2F%2Fcn.vuejs.org%2Fguide%2Fessentials%2Flifecycle.html" target="_blank" rel="noreferrer">Vue 的生命周期</a>可以分为8个阶段：创建阶段、挂载阶段、更新阶段和销毁阶段，每个阶段都有对应的钩子函数。具体如下：</p><h3 id="_1-4-组件之间的传值方式" tabindex="-1">1.4 组件之间的传值方式 <a class="header-anchor" href="#_1-4-组件之间的传值方式" aria-label="Permalink to &quot;1.4 组件之间的传值方式&quot;">​</a></h3><h3 id="_1-5-v-show-和-v-if-的区别" tabindex="-1">1.5 v-show 和 v-if 的区别 <a class="header-anchor" href="#_1-5-v-show-和-v-if-的区别" aria-label="Permalink to &quot;1.5 v-show 和 v-if 的区别&quot;">​</a></h3><h3 id="_1-6-v-model" tabindex="-1">1.6 v-model <a class="header-anchor" href="#_1-6-v-model" aria-label="Permalink to &quot;1.6 v-model&quot;">​</a></h3><p>在 Vue 中，v-model 指令可以用于<strong>双向数据绑定</strong>。当我们在父组件中使用 v-model 绑定一个属性时，Vue 会将该属性及其更新方法自动传递给子组件。</p><p>具体来说，v-model 将父组件中的属性和更新方法分别绑定到子组件的 <code>value</code> 属性和 <code>input</code> 事件上。当子组件修改了 <code>value</code> 的值时，会触发 <code>input</code> 事件，并将新的值通过该事件传递给父组件，从而实现了双向数据绑定。</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">&lt;!-- FatherComponent --&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">ChildComponent</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">v-model</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">data</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">ChildComponent</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">Parent Component: {{ data }}</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">&lt;!-- ChildComponent --&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">input</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">text</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">:value</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">value</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">@input</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">$emit(&#39;input&#39;, $event.target.value)</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">props</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">value</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">]</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h3 id="_1-7-nexttick" tabindex="-1">1.7 nextTick <a class="header-anchor" href="#_1-7-nexttick" aria-label="Permalink to &quot;1.7 nextTick&quot;">​</a></h3><h3 id="_1-8-scoped" tabindex="-1">1.8 scoped <a class="header-anchor" href="#_1-8-scoped" aria-label="Permalink to &quot;1.8 scoped&quot;">​</a></h3><p>在 Vue 的单文件组件中，<code>scoped</code> 属性用于将样式限定在当前组件模块中，使其仅对当前组件起作用。它是一种 CSS 模块化的技术，有助于避免样式的冲突和影响范围的扩散。</p><p>具体而言，<code>scoped</code> 属性会给组件的 <code>&lt;style&gt;</code> 标签添加一个特殊的属性选择器，以确保只有当前组件的元素受到样式的影响。这样，组件中定义的样式规则仅在组件的范围内生效，不会影响到其他组件或全局样式。</p><h3 id="_1-9-key" tabindex="-1">1.9 key <a class="header-anchor" href="#_1-9-key" aria-label="Permalink to &quot;1.9 key&quot;">​</a></h3><h3 id="_1-10-keep-alive" tabindex="-1">1.10 keep-alive <a class="header-anchor" href="#_1-10-keep-alive" aria-label="Permalink to &quot;1.10 keep-alive&quot;">​</a></h3><h3 id="_1-11-响应式数组有哪些限制-如何解决这些限制" tabindex="-1">1.11 响应式数组有哪些限制？如何解决这些限制？ <a class="header-anchor" href="#_1-11-响应式数组有哪些限制-如何解决这些限制" aria-label="Permalink to &quot;1.11 响应式数组有哪些限制？如何解决这些限制？&quot;">​</a></h3><h3 id="_1-12-复用已经封装好的组件时-在不修改原组件的前提下-如何扩展功能" tabindex="-1">1.12 复用已经封装好的组件时，在不修改原组件的前提下，如何扩展功能 <a class="header-anchor" href="#_1-12-复用已经封装好的组件时-在不修改原组件的前提下-如何扩展功能" aria-label="Permalink to &quot;1.12 复用已经封装好的组件时，在不修改原组件的前提下，如何扩展功能&quot;">​</a></h3><p>在Vue中，可以通过使用混入（Mixin）来扩展已封装好的组件的功能，而无需修改原组件的代码。混入是一种可重用的Vue组件选项对象，可以包含组件的各种选项，如数据、计算属性、方法等。</p><p>通过混入，你可以在不修改原组件的情况下，重复使用相同的功能扩展逻辑，并在不同的组件中进行组合和定制化。但要注意，混入可能会引起命名冲突或逻辑复杂性，因此请谨慎使用，并确保正确处理混入的数据和方法与原组件之间的交互关系。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 1. 创建一个混入对象，其中包含要扩展的功能：</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// mixin.js</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> myMixin </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">data</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      additionalData</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">This is additional data</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">methods</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">additionalMethod</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">This is an additional method</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> myMixin</span><span style="color:#89DDFF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">// 2. 在需要扩展功能的组件中导入并使用混入对象：</span></span>
<span class="line"><span style="color:#A6ACCD;">// MyComponent.vue</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">&lt;!-- Original component template --&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> myMixin </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./mixin.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">mixins</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [myMixin]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 原组件的选项继续定义...</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h2 id="_2-vue3-相关" tabindex="-1">2. Vue3 相关 <a class="header-anchor" href="#_2-vue3-相关" aria-label="Permalink to &quot;2. Vue3 相关&quot;">​</a></h2><h3 id="_2-1-teleport" tabindex="-1">2.1 Teleport <a class="header-anchor" href="#_2-1-teleport" aria-label="Permalink to &quot;2.1 Teleport&quot;">​</a></h3><h3 id="_2-2-suspense" tabindex="-1">2.2 Suspense <a class="header-anchor" href="#_2-2-suspense" aria-label="Permalink to &quot;2.2 Suspense&quot;">​</a></h3><h3 id="_2-3-fragment" tabindex="-1">2.3 Fragment <a class="header-anchor" href="#_2-3-fragment" aria-label="Permalink to &quot;2.3 Fragment&quot;">​</a></h3><h3 id="_2-4-vue3-中的动画系统有哪些改进" tabindex="-1">2.4 Vue3 中的动画系统有哪些改进 <a class="header-anchor" href="#_2-4-vue3-中的动画系统有哪些改进" aria-label="Permalink to &quot;2.4 Vue3 中的动画系统有哪些改进&quot;">​</a></h3><h2 id="_3-vue-拓展知识" tabindex="-1">3. Vue 拓展知识 <a class="header-anchor" href="#_3-vue-拓展知识" aria-label="Permalink to &quot;3. Vue 拓展知识&quot;">​</a></h2><h3 id="_3-1-vue3-和-vue2-的区别" tabindex="-1">3.1 Vue3 和 Vue2 的区别 <a class="header-anchor" href="#_3-1-vue3-和-vue2-的区别" aria-label="Permalink to &quot;3.1 Vue3 和 Vue2 的区别&quot;">​</a></h3><h3 id="_3-2-双向绑定和响应式的关系" tabindex="-1">3.2 双向绑定和响应式的关系 <a class="header-anchor" href="#_3-2-双向绑定和响应式的关系" aria-label="Permalink to &quot;3.2 双向绑定和响应式的关系&quot;">​</a></h3><p>双向绑定和响应式是相关但不完全相同的概念。</p><ul><li><strong>响应式 (Reactivity)：</strong> 指的是数据的变化能够自动地触发相关依赖的更新，从而保持视图和数据的同步。在 Vue.js 中，响应式系统负责追踪数据的变化，并在数据变化时更新相关的视图，使得视图能够反映出最新的数据状态。响应式系统可以通过监听数据的变化来实现，例如使用 Object.defineProperty() 或者 Proxy。【通过 <strong>数据劫持</strong> 和 <strong>发布订阅模式</strong> 实现】</li><li><strong>双向绑定 (Two-way Binding)：</strong> 是一种机制（是一种使视图和模型之间保持同步的机制），使得视图和模型之间的变化能够相互影响。当模型数据发生变化时，视图会自动更新以反映这些变化；同时，当视图中的表单元素值发生变化时，模型数据也会自动更新。在 Vue.js 中，双向绑定是通过在模板中使用 v-model 指令来实现的，它能够将表单元素和数据模型之间建立双向关联。</li></ul><p>虽然双向绑定通常依赖于响应式系统来实现，但它们并不是完全相同的概念。响应式系统可以单独存在，用于追踪数据的变化并更新相关的视图，而双向绑定则是一种特定的应用场景，旨在实现视图和模型之间的双向同步。</p><h3 id="_3-3-composition-api-和-options-api-的区别" tabindex="-1">3.3 Composition API 和 Options API 的区别 <a class="header-anchor" href="#_3-3-composition-api-和-options-api-的区别" aria-label="Permalink to &quot;3.3 Composition API 和 Options API 的区别&quot;">​</a></h3><h3 id="_3-4-proxy-和-object-defineproperty-的区别" tabindex="-1">3.4 Proxy 和 Object.defineProperty 的区别 <a class="header-anchor" href="#_3-4-proxy-和-object-defineproperty-的区别" aria-label="Permalink to &quot;3.4 Proxy 和 Object.defineProperty 的区别&quot;">​</a></h3><h3 id="_3-5-vue-中使用了哪几种设计模式" tabindex="-1">3.5 Vue 中使用了哪几种设计模式 <a class="header-anchor" href="#_3-5-vue-中使用了哪几种设计模式" aria-label="Permalink to &quot;3.5 Vue 中使用了哪几种设计模式&quot;">​</a></h3><h3 id="_3-6-vue-中的性能优化有哪些常见的技巧" tabindex="-1">3.6 Vue 中的性能优化有哪些常见的技巧 <a class="header-anchor" href="#_3-6-vue-中的性能优化有哪些常见的技巧" aria-label="Permalink to &quot;3.6 Vue 中的性能优化有哪些常见的技巧&quot;">​</a></h3><ul><li>使用 v-if 和 v-for 时注意避免不必要的渲染。</li><li>合理使用 computed 属性和 watch 监听器。</li><li>使用 keep-alive 组件缓存组件状态。</li><li>使用异步组件进行按需加载。</li><li>避免在模板中使用复杂的表达式。</li><li>使用 key 属性管理组件和元素的复用。</li><li>合理使用懒加载和分割代码。。。</li></ul><h2 id="_4-虚拟-dom" tabindex="-1">4. 虚拟 DOM <a class="header-anchor" href="#_4-虚拟-dom" aria-label="Permalink to &quot;4. 虚拟 DOM&quot;">​</a></h2><h2 id="_5-diff-算法" tabindex="-1">5. Diff 算法 <a class="header-anchor" href="#_5-diff-算法" aria-label="Permalink to &quot;5. Diff 算法&quot;">​</a></h2><h3 id="vue2" tabindex="-1">Vue2 <a class="header-anchor" href="#vue2" aria-label="Permalink to &quot;Vue2&quot;">​</a></h3><h3 id="vue3" tabindex="-1">Vue3 <a class="header-anchor" href="#vue3" aria-label="Permalink to &quot;Vue3&quot;">​</a></h3><h2 id="_6-响应式原理" tabindex="-1">6. 响应式原理 <a class="header-anchor" href="#_6-响应式原理" aria-label="Permalink to &quot;6. 响应式原理&quot;">​</a></h2><h3 id="vue2-1" tabindex="-1">Vue2 <a class="header-anchor" href="#vue2-1" aria-label="Permalink to &quot;Vue2&quot;">​</a></h3><h3 id="vue3-1" tabindex="-1">Vue3 <a class="header-anchor" href="#vue3-1" aria-label="Permalink to &quot;Vue3&quot;">​</a></h3><h2 id="_7-编译原理" tabindex="-1">7. 编译原理 <a class="header-anchor" href="#_7-编译原理" aria-label="Permalink to &quot;7. 编译原理&quot;">​</a></h2>`,48),o=[p];function t(r,c,i,D,u,F){return n(),a("div",null,o)}const h=s(e,[["render",t]]);export{d as __pageData,h as default};
