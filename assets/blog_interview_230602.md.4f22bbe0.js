import{_ as a,c as e,o as i,V as l}from"./chunks/framework.35c8bad0.js";const b=JSON.parse('{"title":"面试题[前端项目相关]","description":"","frontmatter":{"title":"面试题[前端项目相关]","date":"2023-06-02T00:00:00.000Z"},"headers":[],"relativePath":"blog/interview/230602.md","lastUpdated":1689608040000}'),t={name:"blog/interview/230602.md"},r=l('<h1 id="面试题-前端项目相关" tabindex="-1">面试题[前端项目相关] <a class="header-anchor" href="#面试题-前端项目相关" aria-label="Permalink to &quot;面试题[前端项目相关]&quot;">​</a></h1><h2 id="_1-模块化" tabindex="-1">1. 模块化 <a class="header-anchor" href="#_1-模块化" aria-label="Permalink to &quot;1. 模块化&quot;">​</a></h2><h2 id="_2-微前端" tabindex="-1">2. 微前端 <a class="header-anchor" href="#_2-微前端" aria-label="Permalink to &quot;2. 微前端&quot;">​</a></h2><h2 id="_3-低代码" tabindex="-1">3. 低代码 <a class="header-anchor" href="#_3-低代码" aria-label="Permalink to &quot;3. 低代码&quot;">​</a></h2><h2 id="_4-前端埋点" tabindex="-1">4. 前端埋点 <a class="header-anchor" href="#_4-前端埋点" aria-label="Permalink to &quot;4. 前端埋点&quot;">​</a></h2><h2 id="_5-权限管理" tabindex="-1">5. 权限管理 <a class="header-anchor" href="#_5-权限管理" aria-label="Permalink to &quot;5. 权限管理&quot;">​</a></h2><h2 id="_6-封装组件的思路" tabindex="-1">6. 封装组件的思路 <a class="header-anchor" href="#_6-封装组件的思路" aria-label="Permalink to &quot;6. 封装组件的思路&quot;">​</a></h2><h2 id="_7-声明式编程和命令式编程" tabindex="-1">7. 声明式编程和命令式编程 <a class="header-anchor" href="#_7-声明式编程和命令式编程" aria-label="Permalink to &quot;7. 声明式编程和命令式编程&quot;">​</a></h2><h2 id="_8-有哪些可能引起前端安全的问题" tabindex="-1">8. 有哪些可能引起前端安全的问题 <a class="header-anchor" href="#_8-有哪些可能引起前端安全的问题" aria-label="Permalink to &quot;8. 有哪些可能引起前端安全的问题&quot;">​</a></h2><ol><li>跨站脚本攻击（Cross-Site Scripting，XSS）：⼀种代码注入方式，为了与 CSS 区分所以被称作 XSS。早期常见于网络论坛，起因是网站没有对用户的输⼊进行严格的限制，使得攻击者可以将脚本上传到帖子让其他人浏览到有恶意脚本的页面，其注入方式很简单包括但不限于 JavaScript / CSS / Flash 等；</li><li>跨站请求伪造（Cross-Site Request Forgeries，CSRF）：指攻击者通过设置好的陷阱，强制对已完成认证的用户进行非预期的个人信息或设定信息等某些状态更新，属于被动攻击；</li><li>iframe 的滥用：iframe 中的内容是由第三方来提供的，默认情况下他们不受控制，他们可以在 iframe 中运行 JavaScript 脚本、Flash 插件、弹出对话框等等，这可能会破坏前端用户体验；</li><li>恶意第三方库：无论是后端服务器应用还是前端应用开发，绝大多数时候都是在借助开发框架和各种类库进行快速开发，⼀旦第三方库被植入恶意代码很容易引起安全问题。</li></ol><h2 id="_9-前端和服务端交互的时候-如何保证数据的安全性-不被第三方修改" tabindex="-1">9. 前端和服务端交互的时候，如何保证数据的安全性？不被第三方修改 <a class="header-anchor" href="#_9-前端和服务端交互的时候-如何保证数据的安全性-不被第三方修改" aria-label="Permalink to &quot;9. 前端和服务端交互的时候，如何保证数据的安全性？不被第三方修改&quot;">​</a></h2><ol><li>使用加密通信：使用安全的通信协议（如HTTPS）来加密数据传输，确保数据在传输过程中不被窃听或篡改。加密通信可以使用传输层安全性协议（TLS）来实现。</li><li>身份验证和授权：确保只有经过身份验证的用户才能访问和操作数据。使用安全的身份验证机制，如用户名和密码、令牌或证书，来验证用户身份，并使用权限控制机制确保用户只能访问其授权范围内的数据。</li><li>输入验证和过滤：对于来自用户的输入数据，进行严格的验证和过滤，以防止恶意输入或注入攻击。使用安全编码实践来处理和验证输入，确保只接受符合预期格式和内容的数据。</li><li>数据加密：对于敏感数据，可以在存储和传输之前对其进行加密。使用强大的加密算法和安全密钥管理来确保数据在存储和传输过程中的安全性。</li><li>安全审计和监控：实施日志记录、审计和监控机制，以便检测和响应潜在的安全威胁。监控系统的活动并记录关键事件，以便进行后续分析和调查。</li><li>更新和安全补丁：及时更新和应用软件、框架和库的安全补丁，以确保系统中的漏洞和安全漏洞得到修复。</li><li>安全培训和意识：对开发人员和用户进行安全培训，提高他们对数据安全的意识和理解，并教授安全最佳实践。</li></ol><h2 id="_10-视频加密、图片加密" tabindex="-1">10. 视频加密、图片加密 <a class="header-anchor" href="#_10-视频加密、图片加密" aria-label="Permalink to &quot;10. 视频加密、图片加密&quot;">​</a></h2><p>视频加密和图片加密是用于保护视频和图片内容安全的方法。它们涉及以下关键方面：</p><ol><li>加密算法：选择合适的加密算法，如对称加密算法（如AES）和非对称加密算法（如RSA），用于对视频和图片进行加密。</li><li>密钥管理：生成、存储和管理加密和解密所需的密钥。密钥应该被安全地存储，仅授权的用户能够访问。</li><li>加密/解密过程：使用加密密钥对视频或图片进行加密，确保只有授权的用户能够解密和查看。解密过程需要正确的密钥进行解密操作。</li><li>数字版权管理（DRM）：对于视频，数字版权管理技术可用于保护内容的合法使用，控制访问权限和防止非授权的复制和传播。</li><li>数字水印：数字水印技术可嵌入不可见的标识信息到视频或图片中，用于追踪和识别来源和使用情况。</li></ol><h2 id="_11-md5-加密之后可以解密吗" tabindex="-1">11. md5 加密之后可以解密吗 <a class="header-anchor" href="#_11-md5-加密之后可以解密吗" aria-label="Permalink to &quot;11. md5 加密之后可以解密吗&quot;">​</a></h2><p>MD5（Message Digest Algorithm 5）是一种哈希函数，它将输入数据映射为固定长度的哈希值。MD5是单向函数，意味着它是不可逆的，无法从MD5哈希值还原出原始数据。</p><p>因此，MD5加密后的哈希值是不可解密的。它通常用于验证数据完整性和比对哈希值的一致性，而不是作为加密算法来加密和解密数据。</p><p>需要注意的是，由于MD5算法存在碰撞（collision）漏洞，即不同的输入可能会生成相同的MD5哈希值，因此在安全敏感的应用中，建议使用更强大和安全的哈希算法，如SHA-256。</p>',19),o=[r];function h(n,s,d,_,c,u){return i(),e("div",null,o)}const q=a(t,[["render",h]]);export{b as __pageData,q as default};
