import{_ as a,c as e,o as t,V as r}from"./chunks/framework.35c8bad0.js";const _=JSON.parse('{"title":"为什么前端面试不考八股文了","description":"","frontmatter":{"title":"为什么前端面试不考八股文了","date":"2024-03-19T00:00:00.000Z"},"headers":[],"relativePath":"blog/article/240319.md","lastUpdated":1710936973000}'),o={name:"blog/article/240319.md"},i=r('<h1 id="为什么前端面试不考八股文了" tabindex="-1">为什么前端面试不考八股文了 <a class="header-anchor" href="#为什么前端面试不考八股文了" aria-label="Permalink to &quot;为什么前端面试不考八股文了&quot;">​</a></h1><div class="info custom-block"><p class="custom-block-title">源链接</p><p><a href="https://juejin.cn/post/7336859385782583308" target="_blank" rel="noreferrer">https://juejin.cn/post/7336859385782583308</a></p></div><h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h2><p>为什么现在前端面试不考基础知识和八股文了，上来就聊项目。</p><p>其实我也很早就意识到这个问题了，现在和前几年完全不一样了。</p><p>2021年之前，随便写个简历，背诵 1-2 周八股文就可以去面试了。而现在，每一步都很困难。</p><h2 id="举个例子-vue-性能优化方式" tabindex="-1">举个例子：Vue 性能优化方式 <a class="header-anchor" href="#举个例子-vue-性能优化方式" aria-label="Permalink to &quot;举个例子：Vue 性能优化方式&quot;">​</a></h2><p><strong>Vue（或 React）有哪些性能优化方式，请结合项目说明</strong>。</p><p>很多同学就开始背诵了，一般第一条是：使用 <code>v-show</code> 不要使用 <code>v-if</code> ……</p><p>这种类型的问题还有很多。例如简历中写 “首页加载速度提高 50%”，我会问在优化之前具体是多少秒？再例如简历中写 “代码体积压缩 80%”，我也会问压缩之前具体的体积是多少，以及哪几个 lib 占据的最大？</p><p>你是否真的有这方面的经验？一旦问到项目的具体细节，立马就能体现出来。这不是基础知识和八股文能代替的。</p><h2 id="为什么会这样" tabindex="-1">为什么会这样 <a class="header-anchor" href="#为什么会这样" aria-label="Permalink to &quot;为什么会这样&quot;">​</a></h2><h3 id="框架普及化" tabindex="-1">框架普及化 <a class="header-anchor" href="#框架普及化" aria-label="Permalink to &quot;框架普及化&quot;">​</a></h3><p>现在前端框架和技术栈已经完全普及，而且基本稳定了，就那些东西。大家开发也都会选择一个框架，一个脚手架，直接按照框架既定的写法来去开发。</p><p>但这也同时带来一个问题：<strong>框架的普及会降低对程序员技能的要求</strong>。例如：</p><ul><li>Web 开发都使用 Vue React 组件和相应的 API ，你就不需要再去学习 DOM API 。</li><li>框架限制你自由的写 JavaScript 代码，你也就很少能碰到像闭包、内存泄漏等疑难问题。</li><li>Axios 封装了 ajax 的常见操作和配置，也让你远离了 HTTP 协议。</li><li>引入各种 UI 组件库，你都不用写 CSS 了 （剩下的一些 CSS 写法也都被 tailwindcss 捡漏了）</li></ul><p>日常工作都接触不到基础知识，那面试也就被问的少了，这很正常。</p><h3 id="工具精细化" tabindex="-1">工具精细化 <a class="header-anchor" href="#工具精细化" aria-label="Permalink to &quot;工具精细化&quot;">​</a></h3><p>现在各种脚手架，一键为你自动配置 webpack eslint prettier 和 TS 开发环境，不再需要你自己配置。</p><p>甚至 vite 直接内置集成了常见的性能优化配置，能满足大部分场景。可能会有自定义的配置，也都被组内的高工做了，不需要频繁改动。</p><p>所以现在很多同学工作两三年了，但压根就没有接触过 Webpack vite 的配置。</p><p>同理，工作中不需要，面试也不会优先问这些。即便问，也是问像性能优化、原理等高阶问题。</p><h3 id="前端人员整体技术提升" tabindex="-1">前端人员整体技术提升 <a class="header-anchor" href="#前端人员整体技术提升" aria-label="Permalink to &quot;前端人员整体技术提升&quot;">​</a></h3><p>现在不再像 2015、2016 年时，培训机构大量生产初级程序员，投放到市场。刚入门的程序员，很多都是包装的工作经验，问基础知识和八股文就能淘汰一大批，剩下的就可以顺利工作。</p><p>现在大家的平均工作经验都在增加，技术能力都在增加。而且现在网络上的资料和课程遍地都是，想复习基础知识和八股文比之前容易多了，专心复习 1-2 周就能有很大突破。</p><p>水涨船高了，光通过基础知识和八股文已经无法判断优劣。工作经验多了，最后拼的还是真实项目经验。</p><h3 id="企业岗位减少" tabindex="-1">企业岗位减少 <a class="header-anchor" href="#企业岗位减少" aria-label="Permalink to &quot;企业岗位减少&quot;">​</a></h3><p>2021 年之前，公司多，岗位多，大家都抓紧招人，组建团队抓紧搞业务。想快速招人，就不能那么精细，就尽量用标准化的流程和方法，像算法、原理、基础、八股等这些都比较受欢迎。快呀，而且不会有什么大的差错。</p><p>现在岗位少了，招一个人不容易，而且来应聘的还挺多，竞争激烈，那企业就得精挑细选一下，面试就得问点实际的。</p><h2 id="我们该如何应对" tabindex="-1">我们该如何应对 <a class="header-anchor" href="#我们该如何应对" aria-label="Permalink to &quot;我们该如何应对&quot;">​</a></h2><h3 id="当前-认真准备自己的项目经验" tabindex="-1">当前：认真准备自己的项目经验 <a class="header-anchor" href="#当前-认真准备自己的项目经验" aria-label="Permalink to &quot;当前：认真准备自己的项目经验&quot;">​</a></h3><p>第一，你要认真写好简历，把你项目的内容和亮点都准确的表达出来。你得拿出大厂程序员写晋升 ppt 的劲头来写简历。PS：他们都提前一个月就准备 ppt ，上班天天琢磨 ppt 怎么写，而且要经过几轮模拟答辩。</p><p>第二，提前准备面试时的项目介绍和项目难点，尤其是项目难点。你不提前准备好，面试时就可能说不顺畅、不全面。<a href="https://juejin.cn/post/7296404570949648434" target="_blank" rel="noreferrer">前端面试必考题：介绍项目和项目难点</a> 可供大家参考。</p><h3 id="接下来-参与到一个复杂项目中来-提高项目技能" tabindex="-1">接下来：参与到一个复杂项目中来，提高项目技能 <a class="header-anchor" href="#接下来-参与到一个复杂项目中来-提高项目技能" aria-label="Permalink to &quot;接下来：参与到一个复杂项目中来，提高项目技能&quot;">​</a></h3><p>主要是针对工作中没有复杂项目的同学。工作中没有，那只能业余找一个练手。PS：时间在一年一年的过，工作经验多了，也会对你的项目复杂度要求更高。</p><p>所谓的 “真实项目”、“复杂项目” 还有更厉害的 “企业级项目”，这些词都被各种课程用烂了，大家一定要擦亮眼睛。</p><p>至少要包含如下条件：</p><ul><li>真实上线运维的项目，能亲自注册使用的，看得见摸得着的。要有域名、备案、SSL 证书、服务器或 Serverless 服务、数据库、CDN、OSS、统计、监控报警等基础服务，最好还有手机号注册、微信扫码登录、微信支付或退款，等常见功能</li><li>全栈项目。拥抱全栈吧，纯前端，切图仔，未来没有前途的。前端框架和技术栈已经未定了，你再去卷源码、造轮子没有太多意义的。node 全栈（或 SSR）却有另外一片天地</li><li>一个有前途、且实用的业务方向。例如低代码、中台已经过时了，开源项目也不可持续，都不好。目前看来，AIGC 是一个不错的方向（就在前两天 OpenAI 发布 <a href="https://link.juejin.cn?target=https%3A%2F%2Fopenai.com%2Fsora" target="_blank" rel="noreferrer">Sora</a> 智能生成视频，刷爆朋友圈）</li></ul><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>前端面试减少了基础知识和八股文的考察，更多聊项目经验。我觉得这很好，能筛选出更加专业的候选人，而减少 “浑水摸鱼” 的人。同时也给了大家更高的要求：做好项目，写好项目。</p>',40),l=[i];function p(n,h,s,c,d,u){return t(),e("div",null,l)}const f=a(o,[["render",p]]);export{_ as __pageData,f as default};
