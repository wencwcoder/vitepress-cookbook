import{_ as a,c as s,o as n,V as l}from"./chunks/framework.35c8bad0.js";const C=JSON.parse('{"title":"面试题[JavaScript]","description":"","frontmatter":{"title":"面试题[JavaScript]","date":"2023-05-24T00:00:00.000Z"},"headers":[],"relativePath":"blog/interview/230524.md","lastUpdated":1717253188000}'),e={name:"blog/interview/230524.md"},o=l(`<h1 id="面试题-javascript" tabindex="-1">面试题[JavaScript] <a class="header-anchor" href="#面试题-javascript" aria-label="Permalink to &quot;面试题[JavaScript]&quot;">​</a></h1><h2 id="_1-javascript-基础知识" tabindex="-1">1. JavaScript 基础知识 <a class="header-anchor" href="#_1-javascript-基础知识" aria-label="Permalink to &quot;1. JavaScript 基础知识&quot;">​</a></h2><h3 id="_1-1-数据类型" tabindex="-1">1.1 数据类型 <a class="header-anchor" href="#_1-1-数据类型" aria-label="Permalink to &quot;1.1 数据类型&quot;">​</a></h3><p>JavaScript 中将数据类型分为基本数据类型和引用数据类型，它们其中有一个区别就是存储的位置不同。</p><p>基本数据类型：boolean、string、number、undefined、null、symbol、bigint。</p><p>引用数据类型：array、object。</p><h3 id="_1-2-typeof-和-instanceof-的区别" tabindex="-1">1.2 typeof 和 instanceof 的区别 <a class="header-anchor" href="#_1-2-typeof-和-instanceof-的区别" aria-label="Permalink to &quot;1.2 typeof 和 instanceof 的区别&quot;">​</a></h3><p>instanceof 原理手写</p><h3 id="_1-3-typeof-null-的结果是什么-为什么" tabindex="-1">1.3 typeof null 的结果是什么？为什么？ <a class="header-anchor" href="#_1-3-typeof-null-的结果是什么-为什么" aria-label="Permalink to &quot;1.3 typeof null 的结果是什么？为什么？&quot;">​</a></h3><h3 id="_1-4-字符串的常用方法" tabindex="-1">1.4 字符串的常用方法 <a class="header-anchor" href="#_1-4-字符串的常用方法" aria-label="Permalink to &quot;1.4 字符串的常用方法&quot;">​</a></h3><h3 id="_1-5-数组的常用方法" tabindex="-1">1.5 数组的常用方法 <a class="header-anchor" href="#_1-5-数组的常用方法" aria-label="Permalink to &quot;1.5 数组的常用方法&quot;">​</a></h3><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 判断变量是否是数组</span></span>
<span class="line"><span style="color:#A6ACCD;">Array</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">isArray</span><span style="color:#A6ACCD;">(arr)</span></span>
<span class="line"><span style="color:#A6ACCD;">arr </span><span style="color:#89DDFF;">instanceof</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Array</span></span>
<span class="line"><span style="color:#FFCB6B;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">toString</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#A6ACCD;">(arr) </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">[object Array]</span><span style="color:#89DDFF;">&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="_1-6-对象的常用方法" tabindex="-1">1.6 对象的常用方法 <a class="header-anchor" href="#_1-6-对象的常用方法" aria-label="Permalink to &quot;1.6 对象的常用方法&quot;">​</a></h3><h3 id="_1-7-变量提升" tabindex="-1">1.7 变量提升 <a class="header-anchor" href="#_1-7-变量提升" aria-label="Permalink to &quot;1.7 变量提升&quot;">​</a></h3><h3 id="_1-8-闭包和作用域" tabindex="-1">1.8 闭包和作用域 <a class="header-anchor" href="#_1-8-闭包和作用域" aria-label="Permalink to &quot;1.8 闭包和作用域&quot;">​</a></h3><details class="details custom-block"><summary>闭包定义</summary><p>根据 JavaScript 中的词法作用域规则，内部函数总是可以访问其外部函数中声明的变量。当内部函数被返回到外部函数之外时，即使外部函数执行结束了，但是内部函数引用了外部函数的变量，这些变量仍然会被保存在内存中。这个现象称为闭包。</p></details><p>JavaScript 中常见的作用域包括全局作用域、函数作用域、块级作用域。</p><p>JavaScript 中自由变量的查找是在<strong>函数定义</strong>的地方，向上级作用域查找，不是在执行的地方。</p><p>闭包是作用域应用的特殊场景。常见的闭包使用有两种场景：一种是函数作为参数被传递；一种是函数作为返回值被返回。</p><p>怎么看待闭包的副作用？</p><h3 id="_1-9-原型和原型链" tabindex="-1">1.9 原型和原型链 <a class="header-anchor" href="#_1-9-原型和原型链" aria-label="Permalink to &quot;1.9 原型和原型链&quot;">​</a></h3><h3 id="_1-10-javascript-执行上下文、执行栈和闭包" tabindex="-1">1.10 JavaScript 执行上下文、执行栈和闭包 <a class="header-anchor" href="#_1-10-javascript-执行上下文、执行栈和闭包" aria-label="Permalink to &quot;1.10 JavaScript 执行上下文、执行栈和闭包&quot;">​</a></h3><h3 id="_1-11-对-this-的理解" tabindex="-1">1.11 对 this 的理解 <a class="header-anchor" href="#_1-11-对-this-的理解" aria-label="Permalink to &quot;1.11 对 this 的理解&quot;">​</a></h3><h3 id="_1-12-new-操作符做了什么" tabindex="-1">1.12 new 操作符做了什么 <a class="header-anchor" href="#_1-12-new-操作符做了什么" aria-label="Permalink to &quot;1.12 new 操作符做了什么&quot;">​</a></h3><h3 id="_1-13-事件模型" tabindex="-1">1.13 事件模型 <a class="header-anchor" href="#_1-13-事件模型" aria-label="Permalink to &quot;1.13 事件模型&quot;">​</a></h3><p>事件冒泡（Event Bubbling）、事件捕获（Event Capturing）、事件委托（Event Delegation）。</p><h3 id="_1-14-事件循环" tabindex="-1">1.14 事件循环 <a class="header-anchor" href="#_1-14-事件循环" aria-label="Permalink to &quot;1.14 事件循环&quot;">​</a></h3><p><a href="/vitepress-cookbook/frontend/javascript/240529">JavaScript事件循环机制</a></p><h3 id="_1-15-javascript-中的异步编程" tabindex="-1">1.15 JavaScript 中的异步编程 <a class="header-anchor" href="#_1-15-javascript-中的异步编程" aria-label="Permalink to &quot;1.15 JavaScript 中的异步编程&quot;">​</a></h3><h3 id="_1-16-javascript-中的严格模式" tabindex="-1">1.16 JavaScript 中的严格模式 <a class="header-anchor" href="#_1-16-javascript-中的严格模式" aria-label="Permalink to &quot;1.16 JavaScript 中的严格模式&quot;">​</a></h3><h3 id="_1-17-for-in-和-for-of-的区别" tabindex="-1">1.17 for...in 和 for...of 的区别 <a class="header-anchor" href="#_1-17-for-in-和-for-of-的区别" aria-label="Permalink to &quot;1.17 for...in 和 for...of 的区别&quot;">​</a></h3><h3 id="_1-18-commonjs-和-es-module-的区别" tabindex="-1">1.18 CommonJS 和 ES Module 的区别 <a class="header-anchor" href="#_1-18-commonjs-和-es-module-的区别" aria-label="Permalink to &quot;1.18 CommonJS 和 ES Module 的区别&quot;">​</a></h3><h2 id="_2-javascript-拓展知识" tabindex="-1">2. JavaScript 拓展知识 <a class="header-anchor" href="#_2-javascript-拓展知识" aria-label="Permalink to &quot;2. JavaScript 拓展知识&quot;">​</a></h2><h3 id="_2-1-深拷贝和浅拷贝的区别" tabindex="-1">2.1 深拷贝和浅拷贝的区别 <a class="header-anchor" href="#_2-1-深拷贝和浅拷贝的区别" aria-label="Permalink to &quot;2.1 深拷贝和浅拷贝的区别&quot;">​</a></h3><h3 id="_2-2-ecma-标准从提案到发布有几个阶段-哪个阶段是具有里程碑意义的" tabindex="-1">2.2 ECMA 标准从提案到发布有几个阶段？哪个阶段是具有里程碑意义的 <a class="header-anchor" href="#_2-2-ecma-标准从提案到发布有几个阶段-哪个阶段是具有里程碑意义的" aria-label="Permalink to &quot;2.2 ECMA 标准从提案到发布有几个阶段？哪个阶段是具有里程碑意义的&quot;">​</a></h3><p>ECMA标准从提案到发布经历了以下几个阶段：</p><ol><li>Stage 0 - Strawman（草案）：这个阶段是最初的提案阶段，通常由个人或小组提出，并还没有经过正式的标准化流程。提案可能只是一个想法或初步的概念。</li><li>Stage 1 - Proposal（提案）：在这个阶段，提案开始进入正式的标准化流程。提案需要详细说明其功能、语法和语义，并且需要提供示例代码和使用案例。</li><li>Stage 2 - Draft（草稿）：在这个阶段，提案转化为一份详细的草稿，其中包含了具体的语法规范和语义定义。草稿需要经过审查和讨论，并且需要有多个独立实现的证明。</li><li>Stage 3 - Candidate（候选）：在这个阶段，提案已经足够成熟，可以被视为候选标准。这意味着提案已经通过了实际应用并经过广泛的测试和实现。</li><li>Stage 4 - Finished（完成）：在这个阶段，提案被接受为最终的标准，已经准备好发布。提案的规范细节已经完善，并且已经有多个独立实现通过了所有测试。</li></ol><p>这些阶段代表了ECMA标准的不同发展阶段，其中最具里程碑意义的是Stage 4 - Finished（完成）阶段。在这个阶段，提案被接受为最终的标准，意味着它已经经过了广泛的实现、测试和审查，并被认为是稳定和可靠的。完成阶段的标准可以被广泛采用和应用于实际的编程环境中。</p><h3 id="_2-3-不创建新变量的前提下-如何交换两个变量的位置" tabindex="-1">2.3 不创建新变量的前提下，如何交换两个变量的位置 <a class="header-anchor" href="#_2-3-不创建新变量的前提下-如何交换两个变量的位置" aria-label="Permalink to &quot;2.3 不创建新变量的前提下，如何交换两个变量的位置&quot;">​</a></h3><ul><li>解构赋值：适用于数组、对象和其他可迭代的数据结构。</li></ul><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> b </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">20</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">[a</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> b] </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> [b</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> a]</span><span style="color:#89DDFF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li>位运算符 -- 位异或（^）运算符：只适用于数字类型的变量。</li></ul><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> b </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">^</span><span style="color:#A6ACCD;"> b</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">b </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">^</span><span style="color:#A6ACCD;"> b</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">^</span><span style="color:#A6ACCD;"> b</span><span style="color:#89DDFF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ul><li>加法和减法、乘法和除法：只适用于数字类型的变量。</li></ul><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> b </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> b</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">b </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> b</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> b</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> b</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">b </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;"> b</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;"> b</span><span style="color:#89DDFF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="_2-4-javascript-文件相互引用有什么问题" tabindex="-1">2.4 JavaScript 文件相互引用有什么问题 <a class="header-anchor" href="#_2-4-javascript-文件相互引用有什么问题" aria-label="Permalink to &quot;2.4 JavaScript 文件相互引用有什么问题&quot;">​</a></h3><p>可能导致代码执行错误或者无法正常工作。下面是一些常见的问题及其解决方法：</p><ol><li><strong>循环依赖（Circular Dependency）</strong>： 循环依赖指的是两个或多个模块相互依赖，直接或间接地引用对方，导致模块无法正确加载。解决循环依赖问题的方法包括： <ul><li>重构代码结构，将共享的逻辑抽离到单独的模块中，避免直接相互引用。</li><li>使用异步加载模块的方式，如 <code>import()</code> 动态导入语法，可以延迟加载模块，避免循环依赖问题。</li></ul></li><li><strong>加载顺序错误</strong>： 当 JavaScript 文件相互引用时，确保它们之间的加载顺序是正确的非常重要。如果加载顺序错误，可能会导致某些模块在使用时还未被加载，从而出现错误。解决加载顺序错误的方法包括： <ul><li>明确定义模块之间的依赖关系，确保先加载依赖的模块，再加载依赖它们的模块。</li><li>使用模块打包工具（如 Webpack、Rollup 等）来管理模块之间的依赖关系和加载顺序，确保打包后的文件能正确加载所有模块。</li></ul></li><li><strong>使用命名导出和默认导出</strong>： 在模块间引用时，可以使用命名导出和默认导出来更清晰地定义模块之间的关系。通过明确导出和导入需要的函数、变量等，可以减少不必要的引用问题。</li><li><strong>使用事件订阅/发布模式</strong>： 如果存在模块之间需要通信的情况，可以考虑使用事件订阅/发布模式（Event Emitter），模块之间通过事件进行通信，避免直接引用对方。</li></ol><p>总的来说，避免 JavaScript 文件相互引用时的常见问题，需要注意模块之间的依赖关系、加载顺序以及合理设计模块之间的通信机制。通过合理的代码组织和模块化设计，可以有效减少相互引用带来的问题，并确保代码的可维护性和可扩展性。</p>`,49),p=[o];function r(t,c,i,D,h,d){return n(),s("div",null,p)}const b=a(e,[["render",r]]);export{C as __pageData,b as default};
