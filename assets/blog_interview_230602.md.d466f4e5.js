import{_ as a,c as i,o as e,V as l}from"./chunks/framework.35c8bad0.js";const u=JSON.parse('{"title":"面试题[前端项目相关]","description":"","frontmatter":{"title":"面试题[前端项目相关]","date":"2023-06-02T00:00:00.000Z"},"headers":[],"relativePath":"blog/interview/230602.md","lastUpdated":1706791958000}'),o={name:"blog/interview/230602.md"},t=l('<h1 id="面试题-前端项目相关" tabindex="-1">面试题[前端项目相关] <a class="header-anchor" href="#面试题-前端项目相关" aria-label="Permalink to &quot;面试题[前端项目相关]&quot;">​</a></h1><h2 id="_1-模块化" tabindex="-1">1. 模块化 <a class="header-anchor" href="#_1-模块化" aria-label="Permalink to &quot;1. 模块化&quot;">​</a></h2><h2 id="_2-微前端" tabindex="-1">2. 微前端 <a class="header-anchor" href="#_2-微前端" aria-label="Permalink to &quot;2. 微前端&quot;">​</a></h2><h2 id="_3-低代码" tabindex="-1">3. 低代码 <a class="header-anchor" href="#_3-低代码" aria-label="Permalink to &quot;3. 低代码&quot;">​</a></h2><p>组成结构：工具栏、物料区、渲染器、设置器。</p><h2 id="_4-前端埋点" tabindex="-1">4. 前端埋点 <a class="header-anchor" href="#_4-前端埋点" aria-label="Permalink to &quot;4. 前端埋点&quot;">​</a></h2><h2 id="_5-权限管理" tabindex="-1">5. 权限管理 <a class="header-anchor" href="#_5-权限管理" aria-label="Permalink to &quot;5. 权限管理&quot;">​</a></h2><h2 id="_6-单点登录" tabindex="-1">6. 单点登录 <a class="header-anchor" href="#_6-单点登录" aria-label="Permalink to &quot;6. 单点登录&quot;">​</a></h2><h2 id="_7-设计模式" tabindex="-1">7. 设计模式 <a class="header-anchor" href="#_7-设计模式" aria-label="Permalink to &quot;7. 设计模式&quot;">​</a></h2><p>设计模式有哪些？</p><p>32种设计模式是根据什么来的？（6大程序设计原则和23种设计模式）</p><h2 id="_8-封装组件的思路" tabindex="-1">8. 封装组件的思路 <a class="header-anchor" href="#_8-封装组件的思路" aria-label="Permalink to &quot;8. 封装组件的思路&quot;">​</a></h2><h2 id="_9-声明式编程和命令式编程" tabindex="-1">9. 声明式编程和命令式编程 <a class="header-anchor" href="#_9-声明式编程和命令式编程" aria-label="Permalink to &quot;9. 声明式编程和命令式编程&quot;">​</a></h2><h2 id="_10-有哪些可能引起前端安全的问题" tabindex="-1">10. 有哪些可能引起前端安全的问题 <a class="header-anchor" href="#_10-有哪些可能引起前端安全的问题" aria-label="Permalink to &quot;10. 有哪些可能引起前端安全的问题&quot;">​</a></h2><ol><li>跨站脚本攻击（Cross-Site Scripting，XSS）：⼀种代码注入方式，为了与 CSS 区分所以被称作 XSS。早期常见于网络论坛，起因是网站没有对用户的输⼊进行严格的限制，使得攻击者可以将脚本上传到帖子让其他人浏览到有恶意脚本的页面，其注入方式很简单包括但不限于 JavaScript / CSS / Flash 等；</li><li>跨站请求伪造（Cross-Site Request Forgeries，CSRF）：指攻击者通过设置好的陷阱，强制对已完成认证的用户进行非预期的个人信息或设定信息等某些状态更新，属于被动攻击；</li><li>iframe 的滥用：iframe 中的内容是由第三方来提供的，默认情况下他们不受控制，他们可以在 iframe 中运行 JavaScript 脚本、Flash 插件、弹出对话框等等，这可能会破坏前端用户体验；</li><li>恶意第三方库：无论是后端服务器应用还是前端应用开发，绝大多数时候都是在借助开发框架和各种类库进行快速开发，⼀旦第三方库被植入恶意代码很容易引起安全问题。</li></ol><h2 id="_11-前端和服务端交互的时候-如何保证数据的安全性-不被第三方修改" tabindex="-1">11. 前端和服务端交互的时候，如何保证数据的安全性？不被第三方修改 <a class="header-anchor" href="#_11-前端和服务端交互的时候-如何保证数据的安全性-不被第三方修改" aria-label="Permalink to &quot;11. 前端和服务端交互的时候，如何保证数据的安全性？不被第三方修改&quot;">​</a></h2><ol><li>使用加密通信：使用安全的通信协议（如HTTPS）来加密数据传输，确保数据在传输过程中不被窃听或篡改。加密通信可以使用传输层安全性协议（TLS）来实现。</li><li>身份验证和授权：确保只有经过身份验证的用户才能访问和操作数据。使用安全的身份验证机制，如用户名和密码、令牌或证书，来验证用户身份，并使用权限控制机制确保用户只能访问其授权范围内的数据。</li><li>输入验证和过滤：对于来自用户的输入数据，进行严格的验证和过滤，以防止恶意输入或注入攻击。使用安全编码实践来处理和验证输入，确保只接受符合预期格式和内容的数据。</li><li>数据加密：对于敏感数据，可以在存储和传输之前对其进行加密。使用强大的加密算法和安全密钥管理来确保数据在存储和传输过程中的安全性。</li><li>安全审计和监控：实施日志记录、审计和监控机制，以便检测和响应潜在的安全威胁。监控系统的活动并记录关键事件，以便进行后续分析和调查。</li><li>更新和安全补丁：及时更新和应用软件、框架和库的安全补丁，以确保系统中的漏洞和安全漏洞得到修复。</li><li>安全培训和意识：对开发人员和用户进行安全培训，提高他们对数据安全的意识和理解，并教授安全最佳实践。</li></ol><h2 id="_12-媒体技术" tabindex="-1">12. 媒体技术 <a class="header-anchor" href="#_12-媒体技术" aria-label="Permalink to &quot;12. 媒体技术&quot;">​</a></h2><p>媒体技术是指用于处理和传输媒体内容（如音频、视频、图像等）的技术。以下是一些常见的媒体技术：</p><ol><li>HTML5 Audio 和 Video： HTML5 提供了 <code>&lt;audio&gt;</code> 和 <code>&lt;video&gt;</code> 元素，使网页能够直接嵌入音频和视频内容。使用这些元素，可以在网页上播放音频和视频。</li><li>WebRTC： WebRTC（Web Real-Time Communication）是一种在网页上实现实时通信的技术。它可以用于音视频通话、视频会议、实时数据传输等。</li><li>Canvas 和 WebGL： HTML5 的 <code>&lt;canvas&gt;</code> 元素允许使用 JavaScript 绘制图形，可以用于实现复杂的动画、游戏和图形可视化。而 WebGL 则是一种基于 OpenGL ES 的 JavaScript API，可以实现高性能的 3D 图形渲染。</li><li>SVG（Scalable Vector Graphics）： SVG 是一种基于 XML 的矢量图形格式，可以用于创建可缩放的图形和动画。它在网页上可以实现各种图形效果，而且可以无损缩放。</li><li>CSS3 Transitions 和 Animations： CSS3 提供了过渡（Transitions）和动画（Animations）功能，可以通过 CSS 定义过渡和动画效果，实现各种视觉效果。</li><li>媒体查询（Media Queries）： 媒体查询是一种 CSS3 技术，它可以根据设备的特性（如屏幕宽度、设备类型等）来适配不同的样式和布局，从而实现响应式网页设计。</li><li>媒体流（Media Streams）： 媒体流是一种用于获取和处理摄像头、麦克风等设备的音视频数据的技术。它可以用于 WebRTC 和实时媒体处理。</li><li>音频和视频编解码器： 媒体内容在传输和存储过程中需要进行编解码。常见的音频编解码器有 MP3、AAC、Ogg Vorbis 等，常见的视频编解码器有 H.264、VP9、WebM 等。</li></ol><h2 id="_13-及时通信技术" tabindex="-1">13. 及时通信技术 <a class="header-anchor" href="#_13-及时通信技术" aria-label="Permalink to &quot;13. 及时通信技术&quot;">​</a></h2><p>及时通信技术（Real-Time Communication, RTC）是指用于实现<strong>实时数据传输和实时通信</strong>的技术。以下是一些常见的及时通信技术：</p><ol><li>WebRTC（Web Real-Time Communication）： WebRTC 是一种开放的实时通信技术，可以在网页上实现实时音视频通话、视频会议、数据传输等功能。它使用基于浏览器的 JavaScript API，支持点对点通信和流媒体传输。</li><li>WebSocket： WebSocket 是一种在浏览器和服务器之间建立持久性连接的技术，使双向通信成为可能。相比传统的 HTTP 请求，WebSocket 具有更低的延迟和更高的实时性，适用于实时聊天、游戏和即时数据传输等场景。</li><li>MQTT（Message Queuing Telemetry Transport）： MQTT 是一种轻量级的消息传输协议，专为物联网设备和低带宽、高延迟网络环境设计。它支持发布/订阅模式，可以实现实时数据传输和消息通知。</li><li>Socket.IO： Socket.IO 是一个基于 WebSocket 的实时通信库，它为实时应用程序提供了跨平台、跨浏览器的通信解决方案。它支持 WebSocket、轮询和其他传输方式，以确保在各种环境中实现最佳的实时通信效果。</li><li>SignalR： SignalR 是一个 Microsoft 开发的实时通信库，用于在客户端和服务器之间建立实时连接。它支持 WebSocket、Server-Sent Events（SSE）、长轮询等方式，为开发者提供了简单的 API 来实现实时通信功能。</li><li>WebSockets Over HTTP/2： HTTP/2 是 HTTP 协议的最新版本，它支持多路复用和二进制传输，使 WebSocket 在 HTTP/2 上运行更加高效和稳定。</li></ol><h2 id="_14-视频加密、图片加密" tabindex="-1">14. 视频加密、图片加密 <a class="header-anchor" href="#_14-视频加密、图片加密" aria-label="Permalink to &quot;14. 视频加密、图片加密&quot;">​</a></h2><p>视频加密和图片加密是用于保护视频和图片内容安全的方法。它们涉及以下关键方面：</p><ol><li>加密算法：选择合适的加密算法，如对称加密算法（如AES）和非对称加密算法（如RSA），用于对视频和图片进行加密。</li><li>密钥管理：生成、存储和管理加密和解密所需的密钥。密钥应该被安全地存储，仅授权的用户能够访问。</li><li>加密/解密过程：使用加密密钥对视频或图片进行加密，确保只有授权的用户能够解密和查看。解密过程需要正确的密钥进行解密操作。</li><li>数字版权管理（DRM）：对于视频，数字版权管理技术可用于保护内容的合法使用，控制访问权限和防止非授权的复制和传播。</li><li>数字水印：数字水印技术可嵌入不可见的标识信息到视频或图片中，用于追踪和识别来源和使用情况。</li></ol><h2 id="_15-md5-加密之后可以解密吗" tabindex="-1">15. md5 加密之后可以解密吗 <a class="header-anchor" href="#_15-md5-加密之后可以解密吗" aria-label="Permalink to &quot;15. md5 加密之后可以解密吗&quot;">​</a></h2><p>MD5（Message Digest Algorithm 5）是一种哈希函数，它将输入数据映射为固定长度的哈希值。MD5 是单向函数，意味着它是不可逆的，无法从MD5 哈希值还原出原始数据。</p><p>因此，MD5 加密后的哈希值是不可解密的。它通常用于验证数据完整性和比对哈希值的一致性，而不是作为加密算法来加密和解密数据。</p><p>需要注意的是，由于 MD5 算法存在碰撞（collision）漏洞，即不同的输入可能会生成相同的 MD5 哈希值，因此在安全敏感的应用中，建议使用更强大和安全的哈希算法，如 SHA-256。</p><h2 id="_16-前端职能的质检工作" tabindex="-1">16. 前端职能的质检工作 <a class="header-anchor" href="#_16-前端职能的质检工作" aria-label="Permalink to &quot;16. 前端职能的质检工作&quot;">​</a></h2><ol><li>代码审查与规范遵循：审查和检查团队成员编写的代码，确保其符合团队的编码规范和最佳实践。强调清晰的代码结构、命名规范、注释和可维护性。</li><li>功能测试：确保前端页面或组件的功能性正确性。这包括检查交互、导航、表单提交、页面布局等方面的功能是否按照预期运行。</li><li>自动化测试和持续集成：创建并维护自动化测试套件，确保代码的持续集成和交付，以便快速检测潜在的问题。</li><li>跨浏览器和跨设备兼容性测试：确保前端在各种浏览器（Chrome、Firefox、Safari、Edge等）和不同设备上（移动设备、平板电脑、桌面电脑）都能正确显示和运行。</li><li>性能和优化检查：分析并优化前端代码，以确保页面加载速度快、性能优良。这包括减少HTTP请求、压缩资源、缓存设置等优化方面的工作。</li><li>可访问性测试：确保网站或应用程序对于残障人士也能够友好地访问和使用。检查颜色对比度、键盘导航、屏幕阅读器兼容性等。</li><li>响应式设计和布局测试：检查和确保网站或应用程序在不同尺寸和分辨率下的响应式布局效果良好。</li><li>页面性能分析：使用工具和技术分析页面性能指标，如加载时间、渲染时间、资源使用情况等，以便优化页面性能。</li><li>漏洞和安全性检查：检测并修复潜在的安全漏洞，确保前端的数据传输和处理是安全可靠的。</li><li>文档编写和维护：编写清晰、详细的技术文档，记录前端代码的使用方法、接口规范、配置说明等，以便于团队成员理解和使用。</li></ol><h2 id="_17-什么是好的代码" tabindex="-1">17. 什么是好的代码 <a class="header-anchor" href="#_17-什么是好的代码" aria-label="Permalink to &quot;17. 什么是好的代码&quot;">​</a></h2><p>好的代码是指具有良好可读性、易于理解和维护，并且具备良好的健壮性，不易出错，容易定位和修复的代码。一个代码质量高的标准通常可以归纳为两个方面：<strong>好看</strong>和<strong>好用</strong>。</p><ul><li><strong>好看：</strong> 指代码的可读性好，容易理解和维护，即使是其他人接手也不会感到困难。这包括命名规范、格式规范、日志规范等方面。一个好看的代码可以通过一些简单的原则来判断，例如良好的命名规范、简洁明了的代码结构等。</li><li><strong>好用：</strong> 指代码的健壮性强，不容易出错，即使出错也容易定位和修复。好用的代码往往具有良好的逻辑清晰度、最少的依赖关系、明确的错误处理策略、高性能的设计以及避免无原则的优化等特点。</li></ul><p>因此，要拥有高质量的代码，可以通过两种途径来实现：</p><ol><li><strong>从优秀的设计开始：</strong> 首先制定好的设计方案，然后用优秀的编码风格去实现这个设计，最后延续并保持这个优秀的编码风格。</li><li><strong>不断重构：</strong> 从糟糕的代码开始，通过不断的重构逼近优秀的设计方案和编码风格，最后延续并保持这个优秀的编码风格。</li></ol><p>在进行代码质量建设时，可以按照以下步骤进行：</p><ol><li><strong>制定规范：</strong> 首先了解什么是好的代码，制定一些简单的原则和规范，包括设计规范、编码规范和安全生产规范等。</li><li><strong>实践规范：</strong> 通过一些技巧和工具，帮助我们更好地遵循规范，例如命名规范、格式规范、代码审查等。</li><li><strong>度量效果：</strong> 对规范实践的效果进行度量，例如通过代码审查等方式，及时跟进和改进。</li><li><strong>总结复盘：</strong> 对代码质量建设过程进行总结和复盘，及时更新规范和改进措施。</li></ol><p>因此，好的代码质量是通过良好的设计、遵循规范、实践和度量、不断改进的过程来实现的。</p>',40),r=[t];function n(s,h,c,d,_,b){return e(),i("div",null,r)}const m=a(o,[["render",n]]);export{u as __pageData,m as default};
