import{_ as s,c as a,o as n,V as l}from"./chunks/framework.35c8bad0.js";const d=JSON.parse('{"title":"React官网学习记录","description":"","frontmatter":{"title":"React官网学习记录","date":"2023-12-20T00:00:00.000Z"},"headers":[],"relativePath":"frontend/react/231220.md","lastUpdated":1716283916000}'),e={name:"frontend/react/231220.md"},p=l(`<h1 id="react官网学习记录" tabindex="-1">React官网学习记录 <a class="header-anchor" href="#react官网学习记录" aria-label="Permalink to &quot;React官网学习记录&quot;">​</a></h1><div class="info custom-block"><p class="custom-block-title">链接</p><p>官网：<a href="https://react.dev/" target="_blank" rel="noreferrer">https://react.dev/</a></p><p>中文文档：<a href="https://zh-hans.react.dev/%E3%80%81https://react.nodejs.cn/" target="_blank" rel="noreferrer">https://zh-hans.react.dev/、https://react.nodejs.cn/</a></p></div><h2 id="_1-首页" tabindex="-1">1. 首页 <a class="header-anchor" href="#_1-首页" aria-label="Permalink to &quot;1. 首页&quot;">​</a></h2><p>React：用于构建 Web 和原生用户界面的库。</p><p>用组件创建用户界面：React 让你可以通过组件来构建用户界面。</p><p>用代码和标签编写组件：React 组件是 JavaScript 函数。想要有条件地显示一些内容吗？使用 <code>if</code> 语句。 想要展示一个列表？尝试使用数组的 <code>map()</code> 方法。学习 React 就是学习编程。这种标签语法被称为 JSX，它是由 React 推广的 JavaScript 语法扩展。将 JSX 标签与相关的渲染逻辑放在一起，使得创建、维护和删除 React 组件变得容易。</p><p>在任何地方添加交互：React 组件接收数据并返回应该出现在屏幕上的内容。你可以通过响应交互（例如用户输入）向它们传递新数据。然后，React 将更新屏幕以匹配新数据。</p><h2 id="_2-学习-react" tabindex="-1">2. 学习 React <a class="header-anchor" href="#_2-学习-react" aria-label="Permalink to &quot;2. 学习 React&quot;">​</a></h2><h3 id="_2-1-快速入门" tabindex="-1">2.1 快速入门 <a class="header-anchor" href="#_2-1-快速入门" aria-label="Permalink to &quot;2.1 快速入门&quot;">​</a></h3><p>欢迎来到 React 文档！本章节将介绍你每天都会使用的 80% 的 React 概念。</p><h4 id="创建和嵌套组件" tabindex="-1">创建和嵌套组件 <a class="header-anchor" href="#创建和嵌套组件" aria-label="Permalink to &quot;创建和嵌套组件&quot;">​</a></h4><p>React 应用程序是由 <strong>组件</strong> 组成的。一个组件是 UI（用户界面）的一部分，它拥有自己的逻辑和外观。组件可以小到一个按钮，也可以大到整个页面。</p><p>React 组件必须以大写字母开头，而 HTML 标签则必须是小写字母。</p><p>React 组件是返回标签的 JavaScript 函数：</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki material-theme-palenight has-highlighted-lines"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 创建</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">MyButton</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> (</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">I&#39;m a button</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#F07178;">  )</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 使用</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">MyApp</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> (</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">h1</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">Welcome to my app</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">h1</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line highlighted"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">MyButton</span><span style="color:#89DDFF;"> /&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#F07178;">  )</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h4 id="使用-jsx-编写标签" tabindex="-1">使用 JSX 编写标签 <a class="header-anchor" href="#使用-jsx-编写标签" aria-label="Permalink to &quot;使用 JSX 编写标签&quot;">​</a></h4><p>上面所使用的标签语法被称为 <em>JSX</em>。它是可选的，但大多数 React 项目会使用 JSX，主要是它很方便。</p><p>JSX 比 HTML 更加严格。你必须闭合标签，如 <code>&lt;br /&gt;</code>。你的组件也不能返回多个 JSX 标签。你必须将它们包裹到一个共享的父级中，比如 <code>&lt;div&gt;...&lt;/div&gt;</code> 或使用空的 Fragment（ <code>&lt;&gt;...&lt;/&gt;</code> ）包裹。</p><h4 id="添加样式" tabindex="-1">添加样式 <a class="header-anchor" href="#添加样式" aria-label="Permalink to &quot;添加样式&quot;">​</a></h4><p>在 React 中，你可以使用 <code>className</code> 来指定一个 CSS 的 class。它与 HTML 的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Global_attributes/class" target="_blank" rel="noreferrer"><code>class</code></a> 属性的工作方式相同；然后，你可以在一个单独的 CSS 文件中为它编写 CSS 规则：</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">img</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">className</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">avatar</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> /&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-css line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">avatar</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">border-radius</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">50%</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="显示数据" tabindex="-1">显示数据 <a class="header-anchor" href="#显示数据" aria-label="Permalink to &quot;显示数据&quot;">​</a></h4><p>JSX 会让你把标签放到 JavaScript 中。而大括号会让你 “转义回” JavaScript 中，这样你就可以从你的代码中嵌入一些变量并展示给用户。例如，这将显示 <code>user.name</code>：</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> (</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">h1</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">user</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">h1</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// style={{}} 并不是一个特殊的语法，而是 style={ }，JSX 大括号内的一个普通 {} 对象</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">img</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#C792EA;">className</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">avatar</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#C792EA;">src</span><span style="color:#89DDFF;">={</span><span style="color:#A6ACCD;">user</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">imageUrl</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#C792EA;">alt</span><span style="color:#89DDFF;">={</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Photo of </span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> user</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#C792EA;">style</span><span style="color:#89DDFF;">={{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">width</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> user</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">imageSize</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">height</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> user</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">imageSize</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}}</span></span>
<span class="line"><span style="color:#89DDFF;">/&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h4 id="条件渲染" tabindex="-1">条件渲染 <a class="header-anchor" href="#条件渲染" aria-label="Permalink to &quot;条件渲染&quot;">​</a></h4><p>React 没有特殊的语法来编写条件语句，因此你使用的就是普通的 JavaScript 代码。</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> content</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> (isLoggedIn) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">content</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">AdminPanel</span><span style="color:#89DDFF;"> /&gt;;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">content</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">LoginForm</span><span style="color:#89DDFF;"> /&gt;;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> (</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">content</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> isLoggedIn </span><span style="color:#89DDFF;">?</span><span style="color:#A6ACCD;"> (</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">AdminPanel</span><span style="color:#89DDFF;"> /&gt;</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> (</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">LoginForm</span><span style="color:#89DDFF;"> /&gt;</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> isLoggedIn </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">AdminPanel</span><span style="color:#89DDFF;"> /&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h4 id="渲染列表" tabindex="-1">渲染列表 <a class="header-anchor" href="#渲染列表" aria-label="Permalink to &quot;渲染列表&quot;">​</a></h4><p>你将依赖 JavaScript 的特性，例如 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/for" target="_blank" rel="noreferrer"><code>for</code> 循环</a> 和 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/map" target="_blank" rel="noreferrer">array 的 <code>map()</code> 函数</a> 来渲染组件列表。</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> products </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> []</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> listItems </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> products</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">map</span><span style="color:#A6ACCD;">(</span><span style="color:#A6ACCD;font-style:italic;">product</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">li</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">key</span><span style="color:#89DDFF;">={</span><span style="color:#A6ACCD;">product</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">id</span><span style="color:#89DDFF;">}&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">product</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">title</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">li</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> (</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">ul</span><span style="color:#89DDFF;">&gt;{</span><span style="color:#A6ACCD;">listItems</span><span style="color:#89DDFF;">}&lt;/</span><span style="color:#F07178;">ul</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h4 id="响应事件" tabindex="-1">响应事件 <a class="header-anchor" href="#响应事件" aria-label="Permalink to &quot;响应事件&quot;">​</a></h4><p>可以通过在组件中声明 <strong>事件处理</strong> 函数来响应事件：</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki material-theme-palenight has-highlighted-lines"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">MyButton</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">function</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">handleClick</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">alert</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">You clicked me!</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> (</span></span>
<span class="line highlighted"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">onClick</span><span style="color:#89DDFF;">={</span><span style="color:#A6ACCD;">handleClick</span><span style="color:#89DDFF;">}&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">      Click me</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#F07178;">  )</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>注意，<code>onClick={handleClick}</code> 的结尾没有小括号！不要 <strong>调用</strong> 事件处理函数：你只需 <strong>把函数传递给事件</strong> 即可。当用户点击按钮时 React 会调用你传递的事件处理函数。</p><h4 id="更新界面" tabindex="-1">更新界面 <a class="header-anchor" href="#更新界面" aria-label="Permalink to &quot;更新界面&quot;">​</a></h4><p>通常你会希望你的组件 “记住” 一些信息并展示出来，比如一个按钮被点击的次数。</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">useState</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">react</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">MyButton</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">count</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">setCount</span><span style="color:#89DDFF;">]</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">useState</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>你将从 <code>useState</code> 中获得两样东西：当前的 state（<code>count</code>），以及用于更新它的函数（<code>setCount</code>）。你可以给它们起任何名字，但按照惯例会像 <code>[something, setSomething]</code> 这样为它们命名。</p><p>React 将再次调用你的组件函数。</p><h4 id="使用-hook" tabindex="-1">使用 Hook <a class="header-anchor" href="#使用-hook" aria-label="Permalink to &quot;使用 Hook&quot;">​</a></h4><p>以 <code>use</code> 开头的函数被称为 <strong>Hook</strong>。<code>useState</code> 是 React 提供的一个内置 Hook。你可以在 <a href="https://zh-hans.react.dev/reference/react" target="_blank" rel="noreferrer">React API 参考</a> 中找到其他内置的 Hook。你也可以通过组合现有的 Hook 来编写属于你自己的 Hook。</p><p>Hook 比普通函数更为严格。你只能在你的组件（或其他 Hook）的 <strong>顶层</strong> 调用 Hook。如果你想在一个条件或循环中使用 <code>useState</code>，请提取一个新的组件并在组件内部使用它。</p><h4 id="组件间共享数据" tabindex="-1">组件间共享数据 <a class="header-anchor" href="#组件间共享数据" aria-label="Permalink to &quot;组件间共享数据&quot;">​</a></h4><p>可能经常需要组件 <strong>共享数据并一起更新</strong>。可以通过 “状态提升”，向上移动 state，实现在组件间共享它。</p><h3 id="_2-2-安装" tabindex="-1">2.2 安装 <a class="header-anchor" href="#_2-2-安装" aria-label="Permalink to &quot;2.2 安装&quot;">​</a></h3><p>React 从诞生之初就是可被渐进式使用的。因此你可以选择性地使用 React 特性。不管你是想体验下 React，用它为简单的 HTML 页面增加交互，还是重新搭建一个由 React 驱动的复杂应用，本章节内容都能帮你快速入门。</p><h4 id="开始新的-react-项目" tabindex="-1">开始新的 React 项目 <a class="header-anchor" href="#开始新的-react-项目" aria-label="Permalink to &quot;开始新的 React 项目&quot;">​</a></h4><p>如果你想完全使用 React 构建一个新的应用或一个新的网站，我们建议你选择社区中流行的 React 支持的框架之一。你可以在没有框架的情况下使用 React，但是我们发现大多数应用和网站最终都会构建常见问题的解决方案，例如代码分割、路由、数据获取和生成 HTML。这些问题对于所有 UI 库都很常见，而不仅仅是 React。</p><p>从框架开始一个项目，你就可以快速使用 React，这样以后也不需要构建自己的框架。</p><p>生产级 React 框架：这些框架支持在生产中部署和扩展应用程序所需的所有功能，并正在努力支持我们的 <a href="https://zh-hans.react.dev/learn/start-a-new-react-project#which-features-make-up-the-react-teams-full-stack-architecture-vision" target="_blank" rel="noreferrer">全栈架构愿景</a>。</p><ol><li>Next.js</li><li>Remix</li><li>Gatsby</li><li>Expo（用于原生应用）</li></ol><p>前沿的 React 框架：在我们探索如何继续改进 React 的过程中，我们意识到将 React 与框架（特别是路由、打包和服务端技术）更紧密地结合起来是我们帮助 React 用户构建更好的应用的最大机会。Next.js 团队已经同意与我们合作研究、开发、集成和测试与框架无关的 React 前沿功能，如 <a href="https://zh-hans.react.dev/blog/2023/03/22/react-labs-what-we-have-been-working-march-2023#react-server-components" target="_blank" rel="noreferrer">React 服务器组件</a>。</p><h4 id="将-react-添加到现有项目" tabindex="-1">将 React 添加到现有项目 <a class="header-anchor" href="#将-react-添加到现有项目" aria-label="Permalink to &quot;将 React 添加到现有项目&quot;">​</a></h4><p>如果想对现有项目添加一些交互，不必使用 React 将其整个重写。只需将 React 添加到已有技术栈中，就可以在任何位置渲染交互式的 React 组件。<a href="https://zh-hans.react.dev/learn/add-react-to-an-existing-project" target="_blank" rel="noreferrer">官网链接</a>。</p><p>在现有网站的子路由中使用 React：1、使用基于 React 的框架构建<strong>应用的 React 部分</strong>；2、在框架配置中指定 <code>/some-app</code> 作为基本路径；3、<strong>配置服务器或代理</strong>，以便所有位于 <code>/some-app/</code> 下的请求都由 React 应用处理。</p><p>在现有页面的一部分中使用 React：1、<strong>配置 JavaScript 环境</strong>，以便使用 <a href="https://zh-hans.react.dev/learn/writing-markup-with-jsx" target="_blank" rel="noreferrer">JSX 语法</a>、<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/import" target="_blank" rel="noreferrer"><code>import</code></a> 和 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/export" target="_blank" rel="noreferrer"><code>export</code></a> 语法将代码拆分为模块，以及从 <a href="https://www.npmjs.com/" target="_blank" rel="noreferrer">npm</a> 包注册表中使用包（例如 React）；2、<strong>在需要的位置渲染 React 组件</strong>。</p><h4 id="编辑器设置" tabindex="-1">编辑器设置 <a class="header-anchor" href="#编辑器设置" aria-label="Permalink to &quot;编辑器设置&quot;">​</a></h4><p>正确配置的编辑器可以使代码更易读和更快地编写。它甚至可以帮助你在编写错误时发现错误！</p><p>推荐的文本编辑器功能：</p><ol><li>代码检查（Linting）：代码检查可以在你编写代码时，发现代码中的问题，以帮你尽早修复。<a href="https://eslint.org/" target="_blank" rel="noreferrer">ESLint</a> 是一款流行且开源的 JavaScript 代码检查工具。</li><li>格式化（Formatting）：与其他贡献者共享你的代码时，你最不想做的就是参与有关 <a href="https://www.google.com/search?q=tabs+vs+spaces" target="_blank" rel="noreferrer">制表符与空格</a> 的讨论！幸运的是，<a href="https://prettier.io/" target="_blank" rel="noreferrer">Prettier</a> 会根据预设配置的规则重新格式化代码，以保证代码整洁。运行 Prettier，你的所有制表符都将转换为空格，并且你的缩进、引号等也将全部更改以符合配置。</li></ol><h4 id="使用-typescript" tabindex="-1">使用 TypeScript <a class="header-anchor" href="#使用-typescript" aria-label="Permalink to &quot;使用 TypeScript&quot;">​</a></h4><p>TypeScript 是一种向 JavaScript 代码库添加类型定义的流行方法。开箱即用的 TypeScript <a href="https://react.nodejs.cn/learn/writing-markup-with-jsx" target="_blank" rel="noreferrer">支持 JSX</a>，只需在项目中添加 <a href="https://www.npmjs.com/package/@types/react" target="_blank" rel="noreferrer"><code>@types/react</code></a> 和 <a href="https://www.npmjs.com/package/@types/react-dom" target="_blank" rel="noreferrer"><code>@types/react-dom</code></a> 即可获得完整的 React Web 支持。</p><h4 id="react-开发者工具" tabindex="-1">React 开发者工具 <a class="header-anchor" href="#react-开发者工具" aria-label="Permalink to &quot;React 开发者工具&quot;">​</a></h4><p>使用 React 开发者工具检查 <code>React components</code>，编辑 <code>props</code> 和 <code>state</code>，并识别性能问题。</p><p>浏览器扩展：调试 React 构建的网站最简单的办法就是安装 React 开发者工具浏览器扩展。<a href="https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi?hl=en" target="_blank" rel="noreferrer">安装 <strong>Chrome</strong> 扩展</a>。</p><h2 id="_3-学习-react-描述-ui" tabindex="-1">3. 学习 React -- 描述 UI <a class="header-anchor" href="#_3-学习-react-描述-ui" aria-label="Permalink to &quot;3. 学习 React -- 描述 UI&quot;">​</a></h2><p>React 是一个用于构建用户界面（UI）的 JavaScript 库，用户界面由按钮、文本和图像等小单元内容构建而成。React 允许你将它们组合成<strong>可重用、可嵌套的组件</strong>。从 Web 端网站到移动端应用，屏幕上的所有内容都可以分解成组件。</p><h3 id="_3-1-你的第一个组件" tabindex="-1">3.1 你的第一个组件 <a class="header-anchor" href="#_3-1-你的第一个组件" aria-label="Permalink to &quot;3.1 你的第一个组件&quot;">​</a></h3><p>React 应用是由被称为 <strong>组件</strong> 的独立 UI 片段构建而成。React 组件本质上是可以任意添加标签的 JavaScript 函数。组件可以小到一个按钮，也可以大到是整个页面。</p><p>组件是 React 的核心概念之一。它们是构建用户界面（UI）的基础，是 UI 构成要素。</p><p>React 允许你将标签、CSS 和 JavaScript 组合成自定义“组件”，即 <strong>应用程序中可复用的 UI 元素</strong>。</p><p>定义组件：<strong>React 组件是一段可以 使用标签进行扩展 的 JavaScript 函数</strong>。</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>React 组件是常规的 JavaScript 函数，但 <strong>组件的名称必须以大写字母开头</strong>，否则它们将无法运行！</p></div><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 返回语句可以全写在一行上</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">img</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">src</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">https://i.imgur.com/MK3eW3As.jpg</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">alt</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Katherine Johnson</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> /&gt;;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 但是，如果你的标签和 return 关键字不在同一行，则必须把它包裹在一对括号中</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> (</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">img</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">src</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">https://i.imgur.com/MK3eW3As.jpg</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">alt</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Katherine Johnson</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> /&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>没有括号包裹的话，任何在 <code>return</code> 下一行的代码都 <a href="https://stackoverflow.com/questions/2846283/what-are-the-rules-for-javascripts-automatic-semicolon-insertion-asi" target="_blank" rel="noreferrer">将被忽略</a>！</p></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>组件可以渲染其他组件，但是 <strong>请不要嵌套他们的定义</strong>：</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Gallery</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 🔴 永远不要在组件中定义组件</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">function</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Profile</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>上面这段代码 <a href="https://zh-hans.react.dev/learn/preserving-and-resetting-state#different-components-at-the-same-position-reset-state" target="_blank" rel="noreferrer">非常慢，并且会导致 bug 产生</a>。因此，你应该在顶层定义每个组件：</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Gallery</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// ✅ 在顶层声明组件</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Profile</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>当子组件需要使用父组件的数据时，你需要 <a href="https://zh-hans.react.dev/learn/passing-props-to-a-component" target="_blank" rel="noreferrer">通过 props 的形式进行传递</a>，而不是嵌套定义。</p></div><h3 id="_3-2-组件的导入与导出" tabindex="-1">3.2 组件的导入与导出 <a class="header-anchor" href="#_3-2-组件的导入与导出" aria-label="Permalink to &quot;3.2 组件的导入与导出&quot;">​</a></h3><p>你可以在一个文件中声明许多组件，但文件的体积过大会变得难以浏览。为了解决这个问题，你可以在一个文件中只<strong>导出</strong>一个组件，然后再从另一个文件中<strong>导入</strong>该组件。</p><h3 id="_3-3-使用-jsx-编写标签" tabindex="-1">3.3 使用 JSX 编写标签 <a class="header-anchor" href="#_3-3-使用-jsx-编写标签" aria-label="Permalink to &quot;3.3 使用 JSX 编写标签&quot;">​</a></h3><p>每个 React 组件都是一个 JavaScript 函数，它可能包含一些标签，React 会将其渲染到浏览器中。React 组件使用一种叫做 JSX 的语法扩展来表示该标签。JSX 看起来很像 HTML，但它更为严格，可以显示动态信息。</p><h2 id="_4-学习-react-添加交互" tabindex="-1">4. 学习 React -- 添加交互 <a class="header-anchor" href="#_4-学习-react-添加交互" aria-label="Permalink to &quot;4. 学习 React -- 添加交互&quot;">​</a></h2><h2 id="_5-学习-react-管理状态" tabindex="-1">5. 学习 React -- 管理状态 <a class="header-anchor" href="#_5-学习-react-管理状态" aria-label="Permalink to &quot;5. 学习 React -- 管理状态&quot;">​</a></h2><h2 id="_6-学习-react-应急方案" tabindex="-1">6. 学习 React -- 应急方案 <a class="header-anchor" href="#_6-学习-react-应急方案" aria-label="Permalink to &quot;6. 学习 React -- 应急方案&quot;">​</a></h2><h2 id="_7-api-参考" tabindex="-1">7. API 参考 <a class="header-anchor" href="#_7-api-参考" aria-label="Permalink to &quot;7. API 参考&quot;">​</a></h2>`,86),o=[p];function t(r,c,i,D,F,y){return n(),a("div",null,o)}const u=s(e,[["render",t]]);export{d as __pageData,u as default};
