import{_ as s,c as a,o as n,V as l}from"./chunks/framework.35c8bad0.js";const A=JSON.parse('{"title":"面试题[React生态系统]","description":"","frontmatter":{"title":"面试题[React生态系统]","date":"2024-11-11T00:00:00.000Z"},"headers":[],"relativePath":"blog/interview/241111.md","lastUpdated":1733148250000}'),p={name:"blog/interview/241111.md"},o=l(`<h1 id="面试题-react生态系统" tabindex="-1">面试题[React生态系统] <a class="header-anchor" href="#面试题-react生态系统" aria-label="Permalink to &quot;面试题[React生态系统]&quot;">​</a></h1><h2 id="_1-react-router" tabindex="-1">1. React Router <a class="header-anchor" href="#_1-react-router" aria-label="Permalink to &quot;1. React Router&quot;">​</a></h2><h3 id="_1-1-react-router-设计原理" tabindex="-1">1.1 React Router 设计原理 <a class="header-anchor" href="#_1-1-react-router-设计原理" aria-label="Permalink to &quot;1.1 React Router 设计原理&quot;">​</a></h3><h3 id="_1-2-router-组件有几种类型" tabindex="-1">1.2 Router 组件有几种类型 <a class="header-anchor" href="#_1-2-router-组件有几种类型" aria-label="Permalink to &quot;1.2 Router 组件有几种类型&quot;">​</a></h3><p>在 React Router 中，主要有三种类型的 Router 组件：BrowserRouter、HashRouter、MemoryRouter。</p><ol><li><p>BrowserRouter</p><p>使用 HTML5 的 history API (pushState, replaceState 和 popstate 事件) 来保持 UI 和 URL 同步，非常适用于现代 web 应用。</p><ul><li>使用场景：现代应用程序，SEO 友好，并且希望能使用浏览器的前进和后退按钮的地方。</li><li>优点：URL 美观，没有多余的符号（如 <code>#</code>）；可以直接导航到特定的 URL。</li><li>缺点：若服务器没有设置好重定向，当直接访问某个子路由时可能会出现 404 错误，因此需要在服务器端做一些配置。</li></ul></li><li><p>HashRouter</p><p>使用 URL 的 hash 部分（比如 <code>window.location.hash</code>）来保持 UI 和 URL 同步，主要用于兼容不支持 HTML5 history API 的浏览器。</p><ul><li>使用场景：老旧浏览器或者静态文件托管服务，不需要服务器端配置即可运行。</li><li>优点：不需要后端支持，也没有 404 问题。</li><li>缺点：URL 中包含 <code>#</code> 符号，不够美观；影响 SEO，因为搜索引擎通常不会索引 <code>#</code> 之后的内容。</li></ul></li><li><p>MemoryRouter</p><p>保持内存中的一个 non-URL 路径历史记录，这个经常在测试和非浏览器环境（比如 React Native）中使用。</p><ul><li>使用场景：测试环境或在没有 URL 功能的环境（例如 React Native）中使用。</li><li>优点：完全在内存中处理路由，无需浏览器环境，可以模拟各种导航情况。</li><li>缺点：因为不使用实际 URL，用户无法直接通过 URL 访问特定视图，主要用于非 web 应用和自动化测试。</li></ul></li></ol><h3 id="_1-3-history-模式中-push-和-replace-的区别" tabindex="-1">1.3 history 模式中，push 和 replace 的区别 <a class="header-anchor" href="#_1-3-history-模式中-push-和-replace-的区别" aria-label="Permalink to &quot;1.3 history 模式中，push 和 replace 的区别&quot;">​</a></h3><p>在 React Router 的 history 模式中，push 和 replace 两个方法的主要区别在于它们如何管理浏览历史记录。</p><ul><li>1）<strong>push 方法</strong>：用于将一个新的记录添加到浏览历史记录中。用户可以通过点击浏览器的“返回”按钮回到前一个页面。</li><li>2）<strong>replace 方法</strong>：用于将当前的历史记录替换为新的记录。使用这个方法用户无法通过浏览器的“返回”按钮回到前一个页面。</li></ul><p>简单来说，push 会创建一个新的历史记录，而 replace 则是替换当前的历史记录。</p><h3 id="_1-4-react-router-中设置重定向" tabindex="-1">1.4 React Router 中设置重定向 <a class="header-anchor" href="#_1-4-react-router-中设置重定向" aria-label="Permalink to &quot;1.4 React Router 中设置重定向&quot;">​</a></h3><p>在 React Router 中设置重定向，你可以使用 <code>&lt;Redirect&gt;</code> 组件或使用 <code>useHistory</code> 钩子函数来实现重定向。（新版不同请注意）</p><ol><li><p>使用 <code>&lt;Redirect&gt;</code> 组件：</p><p>在 React Router v5 中，你可以通过在 <code>&lt;Switch&gt;</code> 组件中使用 <code>&lt;Redirect&gt;</code> 组件来设置重定向。例如：</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">BrowserRouter</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Router</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Route</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Switch</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Redirect</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">react-router-dom</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> App </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> (</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Router</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Switch</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Route</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">exact</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">path</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">component</span><span style="color:#89DDFF;">={</span><span style="color:#A6ACCD;">HomePage</span><span style="color:#89DDFF;">} /&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Route</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">path</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/about</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">component</span><span style="color:#89DDFF;">={</span><span style="color:#A6ACCD;">AboutPage</span><span style="color:#89DDFF;">} /&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Redirect</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">from</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/old-path</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">to</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/new-path</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> /&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Redirect</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">to</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> /&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#FFCB6B;">Switch</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#FFCB6B;">Router</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div></li><li><p>使用 <code>useHistory</code> 钩子：</p><p>在函数组件中，你可以使用 <code>useHistory</code> 钩子进行编程式导航，如下所示：</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">useHistory</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">react-router-dom</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> SomeComponent </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">history</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">useHistory</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">handleRedirect</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">history</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/new-path</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> (</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">onClick</span><span style="color:#89DDFF;">={</span><span style="color:#A6ACCD;">handleRedirect</span><span style="color:#89DDFF;">}&gt;</span><span style="color:#A6ACCD;">Go to New Path</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#F07178;">  )</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div></li><li><p>扩展知识</p><ul><li><p>React Router 的版本差异： React Router v6 进行了重大改动，移除了 <code>&lt;Redirect&gt;</code> 组件，改为使用 <code>&lt;Navigate&gt;</code> 组件，同时引入新的路由配置方案。使用示例如下：</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">BrowserRouter</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Router</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Route</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Routes</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Navigate</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">react-router-dom</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> App </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> (</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Router</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Routes</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Route</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">path</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">element</span><span style="color:#89DDFF;">={&lt;</span><span style="color:#FFCB6B;">HomePage</span><span style="color:#89DDFF;"> /&gt;} /&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Route</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">path</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/about</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">element</span><span style="color:#89DDFF;">={&lt;</span><span style="color:#FFCB6B;">AboutPage</span><span style="color:#89DDFF;"> /&gt;} /&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Route</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">path</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">old-path</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">element</span><span style="color:#89DDFF;">={&lt;</span><span style="color:#FFCB6B;">Navigate</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">to</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/new-path</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> /&gt;} /&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Route</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">path</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">*</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">element</span><span style="color:#89DDFF;">={&lt;</span><span style="color:#FFCB6B;">Navigate</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">to</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> /&gt;} /&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#FFCB6B;">Routes</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#FFCB6B;">Router</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div></li><li><p>编程式导航： 除了 <code>useHistory</code>，React Router v6 引入了 <code>useNavigate</code> 钩子来替代 <code>useHistory</code>，用法类似：</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">useNavigate</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">react-router-dom</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> SomeComponent </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">navigate</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">useNavigate</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">handleRedirect</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">navigate</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/new-path</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> (</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">onClick</span><span style="color:#89DDFF;">={</span><span style="color:#A6ACCD;">handleRedirect</span><span style="color:#89DDFF;">}&gt;</span><span style="color:#A6ACCD;">Go to New Path</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#F07178;">  )</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div></li></ul></li></ol><h2 id="_2-react-测试" tabindex="-1">2. React 测试 <a class="header-anchor" href="#_2-react-测试" aria-label="Permalink to &quot;2. React 测试&quot;">​</a></h2><h2 id="_3-redux" tabindex="-1">3. Redux <a class="header-anchor" href="#_3-redux" aria-label="Permalink to &quot;3. Redux&quot;">​</a></h2><h3 id="_3-1-redux-设计原理" tabindex="-1">3.1 Redux 设计原理 <a class="header-anchor" href="#_3-1-redux-设计原理" aria-label="Permalink to &quot;3.1 Redux 设计原理&quot;">​</a></h3><h3 id="_3-2-redux-和-mobx-和其它-react-状态管理的区别" tabindex="-1">3.2 Redux 和 Mobx 和其它 React 状态管理的区别 <a class="header-anchor" href="#_3-2-redux-和-mobx-和其它-react-状态管理的区别" aria-label="Permalink to &quot;3.2 Redux 和 Mobx 和其它 React 状态管理的区别&quot;">​</a></h3><h3 id="_3-3-redux-状态管理器与将变量挂载到-window-对象中的区别" tabindex="-1">3.3 Redux 状态管理器与将变量挂载到 window 对象中的区别 <a class="header-anchor" href="#_3-3-redux-状态管理器与将变量挂载到-window-对象中的区别" aria-label="Permalink to &quot;3.3 Redux 状态管理器与将变量挂载到 window 对象中的区别&quot;">​</a></h3><p>Redux 状态管理器和将变量挂载到 window 对象中区别主要在于以下几个方面：</p><ol><li><strong>统一管理</strong>：Redux提供了一个集中的存储机制，可以将整个应用的状态集中在一个地方(key:value对象)，并通过定义的动作（actions）来改变状态。这种集中管理方便对状态的更改进行跟踪，利于团队协作和调试。</li><li><strong>调试工具支持</strong>：Redux 提供了强大的调试工具如 Redux DevTools，可以对状态变化进行可视化跟踪，帮助开发者迅速定位问题。而 window 对象上挂载的变量无法提供这种便利的调试支持。</li><li><strong>性能优化</strong>：Redux 通过不可变数据结构和应答式更新机制（reactive updates）有效地优化了性能。它确保了只有受影响的组件重新渲染，而不是整个应用。</li><li><strong>安全性</strong>：将变量挂载到 window 对象中存在潜在的安全隐患，因为所有全局变量都容易受到外部脚本的影响和修改。Redux 中的状态是私有的，不可以直接被外部访问和修改，这提升了应用的安全性。</li><li><strong>扩展性和中间件支持</strong>：Redux 通过中间件（middleware）机制，可以扩展功能，如处理异步操作（redux-thunk，redux-saga等），在状态管理过程中进行日志记录、错误报告等，提升了应用的可扩展性。</li></ol><p>除了上面提到的主要区别，下面我会从几个方面进行更详细的扩展：</p><ol><li><strong>应用规模和复杂度</strong>：对于小型应用，直接将变量挂载到 window 对象中可能比较简单直观，维护成本较低。但随着应用的规模和复杂度增加，管理全局状态会变得更加复杂，这时候引入状态管理库如 Redux 会更有利于维护和扩展。</li><li><strong>不可变性和纯函数</strong>：Redux 以纯函数（reducers）来定义状态转换规则，是一个不可变的状态管理机制。每次状态变化都会创建一个新的状态对象，这支持时间旅行调试和状态回溯。相比之下，window 对象范式更可能导致数据的不可控更改。</li><li><strong>模块化和可维护性</strong>：Redux 提倡模块化，通过 action、reducer 和 store 的分离，增强了代码的可读性和可维护性。window 对象更适用于临时和全局共享变量的情况，但随着变量和逻辑的增加，会更容易混乱和难以维护。</li><li><strong>服务端渲染支持</strong>：Redux 有很好的服务端渲染（SSR）支持，可以方便地在服务端初始化状态。而将状态挂载到 window 对象中的方式则较为繁琐，容易引入不一致的情况。</li><li><strong>开发者社区和生态系统</strong>：Redux 拥有庞大的开发者社区和丰富的生态系统，除了 Redux 本身，还有很多配套的工具和库（如 Redux Toolkit、redux-form 等）。而 window 依赖自身实现管理逻辑，没有统一的标准和社区支持。</li></ol><h3 id="_3-4-redux-中间件的实现原理" tabindex="-1">3.4 Redux 中间件的实现原理 <a class="header-anchor" href="#_3-4-redux-中间件的实现原理" aria-label="Permalink to &quot;3.4 Redux 中间件的实现原理&quot;">​</a></h3><p>在 Redux 中，中间件（Middleware）是一个可以在 action 被发起之后，到达 reducer 之前对 action 进行加工处理的函数。其主要目的是扩展 Redux dispatch 行为，使我们能够在 action 到达 reducer 之前进行额外的操作，如日志记录、错误报告、异步操作等。</p><p>Redux 中间件的实现原理可以总结为：“中间件是一个返回一个新版本的 dispatch 函数的函数，从而在调用 dispatch 时执行自定义逻辑。”</p><p>在 Redux 中你定义中间件的方式是一个函数，它接收 <code>store</code> 的 <code>dispatch</code> 和 <code>getState</code> 方法，并返回一个函数，接收 <code>next</code> 方法。<code>next</code> 方法调用后，会继续传递 action 给下一个中间件或 reducer。</p><p>一个简单的中间件例子如下：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> logger </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">store</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">next</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">action</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">dispatching</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">action</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">result</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">next</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">action</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">next state</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">store</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getState</span><span style="color:#F07178;">())</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">result</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><ol><li><p>中间件在 Redux 应用中的作用</p><ul><li>1）<strong>日志记录</strong>：记录每一次的 action 和状态变化，便于调试和监控。</li><li>2）<strong>错误报告</strong>：捕捉并处理错误，例如在生产环境中向错误报告服务发送错误信息。</li><li>3）<strong>异步操作</strong>：支持异步 action，例如 redux-thunk 和 redux-saga，它们让你可以写出更复杂的异步逻辑。</li><li>4）<strong>授权及权限控制</strong>：在特定的 action 被 dispatch 之前进行权限验证。</li></ul></li><li><p>中间件的作用链机制</p><p>中间件的工作方式可以通过“打桩”的形式来理解，每个中间件可以看成是一个桩，每个桩可以在 action 被传递给下一个桩或者最终传递给 reducer 之前做一些处理。这样多个中间件串联起来形成一个 middleware chain，这个链条形式使得 action 依次通过每一个中间件，最后才到达 reducer。</p></li><li><p>自定义中间件</p><p>实现一个自定义中间件需要了解以下几点：</p><ul><li>1）<strong>中间件格式</strong>：中间件通常是一个函数，签名是 <code>store =&gt; next =&gt; action =&gt; result</code>。</li><li>2）<strong>调用 next(action)</strong>：在自定义中间件中调用 <code>next(action)</code> 以保证 action 能够流向下一个中间件或 reducer。</li><li>3）<strong>执行时机</strong>：中间件在 dispatch action 时被依次调用。</li></ul><p>举个例子，比如我们要实现一个简单的调试中间件，它可以为每个 action 打印日志：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> debugMiddleware </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">store</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">next</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">action</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">debug</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Action Type:</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">action</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">type</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">result</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">next</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">action</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">debug</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">New State:</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">store</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getState</span><span style="color:#F07178;">())</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">result</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div></li><li><p>使用中间件</p><p>在 Redux 中使用中间件可以通过 <code>applyMiddleware</code> 函数。在创建 Redux store 时，传入 <code>applyMiddleware(...middlewares)</code> 来注册中间件。 例如：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">createStore</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">applyMiddleware</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">redux</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> rootReducer </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./reducers</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> logger </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./middlewares/logger</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> store </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">createStore</span><span style="color:#A6ACCD;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">  rootReducer</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">applyMiddleware</span><span style="color:#A6ACCD;">(logger)</span></span>
<span class="line"><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div></li><li><p>多个中间件的例子</p><p>假设我们有两个中间件 <code>logger</code> 和 <code>thunk</code>，可以这样组合使用：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">createStore</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">applyMiddleware</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">redux</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> rootReducer </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./reducers</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> logger </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./middlewares/logger</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> thunk </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">redux-thunk</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> store </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">createStore</span><span style="color:#A6ACCD;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">  rootReducer</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">applyMiddleware</span><span style="color:#A6ACCD;">(thunk</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> logger)</span></span>
<span class="line"><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div></li></ol><h3 id="_3-5-redux-中如何设置初始状态" tabindex="-1">3.5 Redux 中如何设置初始状态 <a class="header-anchor" href="#_3-5-redux-中如何设置初始状态" aria-label="Permalink to &quot;3.5 Redux 中如何设置初始状态&quot;">​</a></h3><p>在 Redux 中设置初始状态的方法主要有两种：</p><ul><li>1）使用 <code>createStore</code> 时传递初始状态。</li><li>2）在 Reducer 中定义初始状态。</li></ul>`,32),e=[o];function t(r,c,D,F,y,i){return n(),a("div",null,e)}const u=s(p,[["render",t]]);export{A as __pageData,u as default};
