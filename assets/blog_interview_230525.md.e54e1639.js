import{_ as e,c as a,o as i,V as t}from"./chunks/framework.35c8bad0.js";const k=JSON.parse('{"title":"面试题[浏览器]","description":"","frontmatter":{"title":"面试题[浏览器]","date":"2023-05-25T00:00:00.000Z"},"headers":[],"relativePath":"blog/interview/230525.md","lastUpdated":1685880461000}'),o={name:"blog/interview/230525.md"},l=t('<h1 id="面试题-浏览器" tabindex="-1">面试题[浏览器] <a class="header-anchor" href="#面试题-浏览器" aria-label="Permalink to &quot;面试题[浏览器]&quot;">​</a></h1><h2 id="_1-跨域问题" tabindex="-1">1. 跨域问题 <a class="header-anchor" href="#_1-跨域问题" aria-label="Permalink to &quot;1. 跨域问题&quot;">​</a></h2><p>由于浏览器同源策略（浏览器安全功能，它会阻止一个域与另一个域的内容进行交互，能有效防止 XSS、CSRF 攻击）的限制，非同源的请求会被限制。</p><p>解决跨域问题的方法：</p><ul><li>配置 nginx 反向代理</li><li>使用 jsonp 方式（script 方式）</li><li>使用图片</li><li>设置 CORS（跨域资源共享）</li><li>利用 iframe 实现</li><li>WebSocket</li></ul><h2 id="_2-浏览器的存储" tabindex="-1">2. 浏览器的存储 <a class="header-anchor" href="#_2-浏览器的存储" aria-label="Permalink to &quot;2. 浏览器的存储&quot;">​</a></h2><ul><li>Cookie</li><li>Session Storage</li><li>Local Storage</li><li>IndexedDB</li><li>Cache Storage</li></ul><h2 id="_3-浏览器渲染页面的过程" tabindex="-1">3. 浏览器渲染页面的过程 <a class="header-anchor" href="#_3-浏览器渲染页面的过程" aria-label="Permalink to &quot;3. 浏览器渲染页面的过程&quot;">​</a></h2><h2 id="_4-token-可以放在-cookie-里吗" tabindex="-1">4. Token 可以放在 Cookie 里吗 <a class="header-anchor" href="#_4-token-可以放在-cookie-里吗" aria-label="Permalink to &quot;4. Token 可以放在 Cookie 里吗&quot;">​</a></h2><p>当被问这个问题的时候，第一时间要想到安全问题。通常回答不可以，因为存在 CSRF（跨站请求伪造）风险，攻击者可以冒用 Cookie 中的信息来发送恶意请求。解决 CSRF 问题，可以设置同源检测（Origin 和 Referer 认证），也可以设置 Samesite 为 Strict。</p>',10),r=[l];function n(s,c,_,d,h,p){return i(),a("div",null,r)}const S=e(o,[["render",n]]);export{k as __pageData,S as default};
