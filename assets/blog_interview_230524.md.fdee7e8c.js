import{_ as a,c as e,o as t,V as i}from"./chunks/framework.35c8bad0.js";const f=JSON.parse('{"title":"面试题[JavaScript]","description":"","frontmatter":{"title":"面试题[JavaScript]","date":"2023-05-24T00:00:00.000Z"},"headers":[],"relativePath":"blog/interview/230524.md","lastUpdated":1685627581000}'),r={name:"blog/interview/230524.md"},o=i('<h1 id="面试题-javascript" tabindex="-1">面试题[JavaScript] <a class="header-anchor" href="#面试题-javascript" aria-label="Permalink to &quot;面试题[JavaScript]&quot;">​</a></h1><h2 id="_1-数据类型" tabindex="-1">1. 数据类型 <a class="header-anchor" href="#_1-数据类型" aria-label="Permalink to &quot;1. 数据类型&quot;">​</a></h2><ul><li>JavaScript 中将数据类型分为基本数据类型和引用数据类型，它们其中有一个区别就是存储的位置不同。</li><li>基本数据类型：boolean、string、number、undefined、null、symbol、bigint。</li><li>引用数据类型：array、object。</li></ul><h2 id="_2-typeof-和-instanceof-的区别" tabindex="-1">2. typeof 和 instanceof 的区别 <a class="header-anchor" href="#_2-typeof-和-instanceof-的区别" aria-label="Permalink to &quot;2. typeof 和 instanceof 的区别&quot;">​</a></h2><h2 id="_3-字符串的常用方法" tabindex="-1">3. 字符串的常用方法 <a class="header-anchor" href="#_3-字符串的常用方法" aria-label="Permalink to &quot;3. 字符串的常用方法&quot;">​</a></h2><h2 id="_4-数组的常用方法" tabindex="-1">4. 数组的常用方法 <a class="header-anchor" href="#_4-数组的常用方法" aria-label="Permalink to &quot;4. 数组的常用方法&quot;">​</a></h2><h2 id="_5-对象的常用方法" tabindex="-1">5. 对象的常用方法 <a class="header-anchor" href="#_5-对象的常用方法" aria-label="Permalink to &quot;5. 对象的常用方法&quot;">​</a></h2><h2 id="_6-闭包和作用域" tabindex="-1">6. 闭包和作用域 <a class="header-anchor" href="#_6-闭包和作用域" aria-label="Permalink to &quot;6. 闭包和作用域&quot;">​</a></h2><ul><li>JavaScript 中常见的作用域包括全局作用域、函数作用域、块级作用域。</li><li>JavaScript 中自由变量的查找是在<strong>函数定义</strong>的地方，向上级作用域查找，不是在执行的地方。</li><li>闭包是作用域应用的特殊场景。常见的闭包使用有两种场景：一种是函数作为参数被传递；一种是函数作为返回值被返回。</li></ul><h2 id="_7-事件模型" tabindex="-1">7. 事件模型 <a class="header-anchor" href="#_7-事件模型" aria-label="Permalink to &quot;7. 事件模型&quot;">​</a></h2><h2 id="_8-事件循环" tabindex="-1">8. 事件循环 <a class="header-anchor" href="#_8-事件循环" aria-label="Permalink to &quot;8. 事件循环&quot;">​</a></h2>',11),l=[o];function n(c,h,s,d,_,u){return t(),e("div",null,l)}const p=a(r,[["render",n]]);export{f as __pageData,p as default};
