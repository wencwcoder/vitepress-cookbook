import{_ as e,c as i,o as a,V as t}from"./chunks/framework.35c8bad0.js";const k=JSON.parse('{"title":"面试题[浏览器]","description":"","frontmatter":{"title":"面试题[浏览器]","date":"2023-05-25T00:00:00.000Z"},"headers":[],"relativePath":"blog/interview/230525.md","lastUpdated":1686155638000}'),l={name:"blog/interview/230525.md"},o=t('<h1 id="面试题-浏览器" tabindex="-1">面试题[浏览器] <a class="header-anchor" href="#面试题-浏览器" aria-label="Permalink to &quot;面试题[浏览器]&quot;">​</a></h1><h2 id="_1-跨域问题" tabindex="-1">1. 跨域问题 <a class="header-anchor" href="#_1-跨域问题" aria-label="Permalink to &quot;1. 跨域问题&quot;">​</a></h2><p>由于浏览器同源策略（浏览器安全功能，它会阻止一个域与另一个域的内容进行交互，能有效防止 XSS、CSRF 攻击）的限制，非同源的请求会被限制。</p><p>解决跨域问题的方法：</p><ul><li>配置 nginx 反向代理</li><li>使用 jsonp 方式（script 方式）</li><li>使用图片</li><li>设置 CORS（跨域资源共享）</li><li>利用 iframe 实现</li><li>WebSocket</li></ul><h2 id="_2-浏览器的存储" tabindex="-1">2. 浏览器的存储 <a class="header-anchor" href="#_2-浏览器的存储" aria-label="Permalink to &quot;2. 浏览器的存储&quot;">​</a></h2><ul><li>Cookie</li><li>Session Storage</li><li>Local Storage</li><li>IndexedDB</li><li>Cache Storage</li></ul><h2 id="_3-浏览器渲染页面的过程" tabindex="-1">3. 浏览器渲染页面的过程 <a class="header-anchor" href="#_3-浏览器渲染页面的过程" aria-label="Permalink to &quot;3. 浏览器渲染页面的过程&quot;">​</a></h2><h2 id="_4-token-可以放在-cookie-里吗" tabindex="-1">4. token 可以放在 cookie 里吗 <a class="header-anchor" href="#_4-token-可以放在-cookie-里吗" aria-label="Permalink to &quot;4. token 可以放在 cookie 里吗&quot;">​</a></h2><p>当被问这个问题的时候，第一时间要想到安全问题。通常回答不可以，因为存在 CSRF（跨站请求伪造）风险，攻击者可以冒用 Cookie 中的信息来发送恶意请求。解决 CSRF 问题，可以设置同源检测（Origin 和 Referer 认证），也可以设置 Samesite 为 Strict。</p><h2 id="_5-常见浏览器所用内核" tabindex="-1">5. 常见浏览器所用内核 <a class="header-anchor" href="#_5-常见浏览器所用内核" aria-label="Permalink to &quot;5. 常见浏览器所用内核&quot;">​</a></h2><ul><li>IE 浏览器内核：Trident 内核；</li><li>Chrome 浏览器内核：统称为 Chromium 内核，以前是 Webkit 内核，现在是 Blink内核；</li><li>Firefox 浏览器内核：Gecko 内核；</li><li>Safari 浏览器内核：Webkit 内核；</li><li>Opera 浏览器内核：最初是自己的 Presto 内核，后来加入谷歌大军，从 Webkit 又到了 Blink 内核。</li></ul><h2 id="_6-有哪些可能引起前端安全的问题" tabindex="-1">6. 有哪些可能引起前端安全的问题 <a class="header-anchor" href="#_6-有哪些可能引起前端安全的问题" aria-label="Permalink to &quot;6. 有哪些可能引起前端安全的问题&quot;">​</a></h2><ul><li><strong>跨站脚本攻击</strong>（Cross-Site Scripting，XSS）：⼀种代码注入方式，为了与 CSS 区分所以被称作 XSS。早期常见于网络论坛，起因是网站没有对用户的输⼊进行严格的限制，使得攻击者可以将脚本上传到帖子让其他人浏览到有恶意脚本的页面，其注入方式很简单包括但不限于 JavaScript / CSS / Flash 等；</li><li><strong>跨站请求伪造</strong>（Cross-Site Request Forgeries，CSRF）：指攻击者通过设置好的陷阱，强制对已完成认证的用户进行非预期的个人信息或设定信息等某些状态更新，属于被动攻击；</li><li><strong>iframe 的滥⽤</strong>：iframe 中的内容是由第三方来提供的，默认情况下他们不受控制，他们可以在 iframe 中运行 JavaScript 脚本、Flash 插件、弹出对话框等等，这可能会破坏前端用户体验；</li><li><strong>恶意第三方库</strong>：无论是后端服务器应用还是前端应用开发，绝大多数时候都是在借助开发框架和各种类库进行快速开发，⼀旦第三方库被植入恶意代码很容易引起安全问题。</li></ul>',14),r=[o];function n(s,c,h,_,d,S){return a(),i("div",null,r)}const p=e(l,[["render",n]]);export{k as __pageData,p as default};
