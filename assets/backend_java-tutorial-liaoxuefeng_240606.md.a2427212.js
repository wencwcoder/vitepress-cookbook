import{_ as a,c as s,o as l,V as n}from"./chunks/framework.35c8bad0.js";const v=JSON.parse('{"title":"Java快速入门","description":"","frontmatter":{"title":"Java快速入门","date":"2024-06-06T00:00:00.000Z"},"headers":[],"relativePath":"backend/java-tutorial-liaoxuefeng/240606.md","lastUpdated":1718007987000}'),e={name:"backend/java-tutorial-liaoxuefeng/240606.md"},t=n(`<h1 id="java快速入门" tabindex="-1">Java快速入门 <a class="header-anchor" href="#java快速入门" aria-label="Permalink to &quot;Java快速入门&quot;">​</a></h1><h2 id="_1-前言" tabindex="-1">1. 前言 <a class="header-anchor" href="#_1-前言" aria-label="Permalink to &quot;1. 前言&quot;">​</a></h2><p>为什么要学Java？</p><p>因为Java是全球排名第一的编程语言，Java工程师也是市场需求最大的软件工程师，选择Java，就是选择了高薪。</p><h3 id="_1-1-为什么-java-应用最广泛" tabindex="-1">1.1 为什么 Java 应用最广泛？ <a class="header-anchor" href="#_1-1-为什么-java-应用最广泛" aria-label="Permalink to &quot;1.1 为什么 Java 应用最广泛？&quot;">​</a></h3><p>从互联网到企业平台，Java是应用最广泛的编程语言，原因在于：</p><ul><li>Java是基于JVM虚拟机的跨平台语言，一次编写，到处运行；</li><li>Java程序易于编写，而且有内置垃圾收集，不必考虑内存管理；</li><li>Java虚拟机拥有工业级的稳定性和高度优化的性能，且经过了长时期的考验；</li><li>Java拥有最广泛的开源社区支持，各种高质量组件随时可用。</li></ul><p>Java语言常年霸占着三大市场：</p><ul><li>互联网和企业应用，这是Java EE的长期优势和市场地位；</li><li>大数据平台，主要有Hadoop、Spark、Flink等，他们都是Java或Scala（一种运行于JVM的编程语言）开发的；</li><li>Android移动平台。</li></ul><p>这意味着Java拥有最广泛的就业市场。</p><h3 id="_1-2-教程特色" tabindex="-1">1.2 教程特色 <a class="header-anchor" href="#_1-2-教程特色" aria-label="Permalink to &quot;1.2 教程特色&quot;">​</a></h3><p>虽然是零基础Java教程，但是覆盖了从基础到高级的Java核心编程，从小白成长到架构师，实现硬实力高薪就业！</p><p>并且，时刻更新至最新版Java！目前教程版本是：<strong>Java 21</strong>!</p><h3 id="_1-3-主要内容" tabindex="-1">1.3 主要内容 <a class="header-anchor" href="#_1-3-主要内容" aria-label="Permalink to &quot;1.3 主要内容&quot;">​</a></h3><p>本章的主要内容是快速掌握Java程序的基础知识，了解并使用变量和各种数据类型，介绍基本的程序流程控制语句。</p><h2 id="_2-java历史" tabindex="-1">2. Java历史 <a class="header-anchor" href="#_2-java历史" aria-label="Permalink to &quot;2. Java历史&quot;">​</a></h2><p>Java最早是由SUN公司（已被Oracle收购）的<a href="https://en.wikipedia.org/wiki/James_Gosling" target="_blank" rel="noreferrer">詹姆斯·高斯林</a>（高司令，人称Java之父）在上个世纪90年代初开发的一种编程语言，最初被命名为Oak，目标是针对小型家电设备的嵌入式应用，结果市场没啥反响。谁料到互联网的崛起，让Oak重新焕发了生机，于是SUN公司改造了Oak，在1995年以Java的名称正式发布，原因是Oak已经被人注册了，因此SUN注册了Java这个商标。随着互联网的高速发展，Java逐渐成为最重要的网络编程语言。</p><p><strong>Java介于编译型语言和解释型语言之间</strong>。编译型语言如C、C++，代码是直接编译成机器码执行，但是不同的平台（x86、ARM等）CPU的指令集不同，因此，需要编译出每一种平台的对应机器码。解释型语言如Python、Ruby没有这个问题，可以由解释器直接加载源码然后运行，代价是运行效率太低。而Java是将代码编译成一种“字节码”，它类似于抽象的CPU指令，然后，针对不同平台编写虚拟机，不同平台的虚拟机负责加载字节码并执行，这样就实现了“一次编写，到处运行”的效果。当然，这是针对Java开发者而言。对于虚拟机，需要为每个平台分别开发。为了保证不同平台、不同公司开发的虚拟机都能正确执行Java字节码，SUN公司制定了一系列的Java虚拟机规范。从实践的角度看，JVM的兼容性做得非常好，低版本的Java字节码完全可以正常运行在高版本的JVM上。</p><p>随着Java的发展，SUN给Java又分出了三个不同版本：</p><ul><li>Java SE：Standard Edition</li><li>Java EE：Enterprise Edition</li><li>Java ME：Micro Edition</li></ul><p>这三者之间有啥关系呢？</p><div class="language-ascii line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ascii</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">┌───────────────────────────┐</span></span>
<span class="line"><span style="color:#A6ACCD;">│Java EE                    │</span></span>
<span class="line"><span style="color:#A6ACCD;">│    ┌────────────────────┐ │</span></span>
<span class="line"><span style="color:#A6ACCD;">│    │Java SE             │ │</span></span>
<span class="line"><span style="color:#A6ACCD;">│    │    ┌─────────────┐ │ │</span></span>
<span class="line"><span style="color:#A6ACCD;">│    │    │   Java ME   │ │ │</span></span>
<span class="line"><span style="color:#A6ACCD;">│    │    └─────────────┘ │ │</span></span>
<span class="line"><span style="color:#A6ACCD;">│    └────────────────────┘ │</span></span>
<span class="line"><span style="color:#A6ACCD;">└───────────────────────────┘</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>简单来说，Java SE就是标准版，包含标准的JVM和标准库，而Java EE是企业版，它只是在Java SE的基础上加上了大量的API和库，以便方便开发Web应用、数据库、消息服务等，Java EE的应用使用的虚拟机和Java SE完全相同。</p><p>Java ME就和Java SE不同，它是一个针对嵌入式设备的“瘦身版”，Java SE的标准库无法在Java ME上使用，Java ME的虚拟机也是“瘦身版”。</p><p>毫无疑问，Java SE是整个Java平台的核心，而Java EE是进一步学习Web应用所必须的。我们熟悉的Spring等框架都是Java EE开源生态系统的一部分。不幸的是，Java ME从来没有真正流行起来，反而是Android开发成为了移动平台的标准之一，因此，没有特殊需求，不建议学习Java ME。</p><p>因此我们推荐的Java学习路线图如下：</p><ol><li>首先要学习Java SE，掌握Java语言本身、Java核心开发技术以及Java标准库的使用；</li><li>如果继续学习Java EE，那么Spring框架、数据库开发、分布式架构就是需要学习的；</li><li>如果要学习大数据开发，那么Hadoop、Spark、Flink这些大数据平台就是需要学习的，他们都基于Java或Scala开发；</li><li>如果想要学习移动开发，那么就深入Android平台，掌握Android App开发。</li></ol><p>无论怎么选择，Java SE的核心技术是基础。</p><h3 id="_2-1-java版本" tabindex="-1">2.1 Java版本 <a class="header-anchor" href="#_2-1-java版本" aria-label="Permalink to &quot;2.1 Java版本&quot;">​</a></h3><p>从1995年发布1.0版本开始，到目前为止，最新的Java版本是Java 21：</p><table><thead><tr><th style="text-align:left;">时间</th><th style="text-align:left;">版本</th></tr></thead><tbody><tr><td style="text-align:left;">1995</td><td style="text-align:left;">1.0</td></tr><tr><td style="text-align:left;">1998</td><td style="text-align:left;">1.2</td></tr><tr><td style="text-align:left;">2000</td><td style="text-align:left;">1.3</td></tr><tr><td style="text-align:left;">2002</td><td style="text-align:left;">1.4</td></tr><tr><td style="text-align:left;">2004</td><td style="text-align:left;">1.5 / 5.0</td></tr><tr><td style="text-align:left;">2005</td><td style="text-align:left;">1.6 / 6.0</td></tr><tr><td style="text-align:left;">2011</td><td style="text-align:left;">1.7 / 7.0</td></tr><tr><td style="text-align:left;">2014</td><td style="text-align:left;">1.8 / 8.0</td></tr><tr><td style="text-align:left;">2017/9</td><td style="text-align:left;">1.9 / 9.0</td></tr><tr><td style="text-align:left;">2018/3</td><td style="text-align:left;">10</td></tr><tr><td style="text-align:left;">2018/9</td><td style="text-align:left;">11</td></tr><tr><td style="text-align:left;">2019/3</td><td style="text-align:left;">12</td></tr><tr><td style="text-align:left;">2019/9</td><td style="text-align:left;">13</td></tr><tr><td style="text-align:left;">2020/3</td><td style="text-align:left;">14</td></tr><tr><td style="text-align:left;">2020/9</td><td style="text-align:left;">15</td></tr><tr><td style="text-align:left;">2021/3</td><td style="text-align:left;">16</td></tr><tr><td style="text-align:left;">2021/9</td><td style="text-align:left;">17</td></tr><tr><td style="text-align:left;">2022/3</td><td style="text-align:left;">18</td></tr><tr><td style="text-align:left;">2022/9</td><td style="text-align:left;">19</td></tr><tr><td style="text-align:left;">2023/3</td><td style="text-align:left;">20</td></tr><tr><td style="text-align:left;">2023/9</td><td style="text-align:left;">21</td></tr></tbody></table><h3 id="_2-2-名词解释" tabindex="-1">2.2 名词解释 <a class="header-anchor" href="#_2-2-名词解释" aria-label="Permalink to &quot;2.2 名词解释&quot;">​</a></h3><p>初学者学Java，经常听到JDK、JRE......这些名词，它们到底是啥？</p><h4 id="jdk、jre" tabindex="-1">JDK、JRE <a class="header-anchor" href="#jdk、jre" aria-label="Permalink to &quot;JDK、JRE&quot;">​</a></h4><ul><li>JDK：Java Development Kit</li><li>JRE：Java Runtime Environment</li></ul><p>简单地说，JRE就是运行Java字节码的虚拟机。但是，如果只有Java源码，要编译成Java字节码，就需要JDK，因为JDK除了包含JRE，还提供了编译器、调试器等开发工具。</p><p>二者关系如下：</p><div class="language-ascii line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ascii</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">┌─────┌──────────────────────────────────┐</span></span>
<span class="line"><span style="color:#A6ACCD;">  │     │     Compiler, debugger, etc.     │</span></span>
<span class="line"><span style="color:#A6ACCD;">  │     └──────────────────────────────────┘</span></span>
<span class="line"><span style="color:#A6ACCD;"> JDK ┌─ ┌──────────────────────────────────┐</span></span>
<span class="line"><span style="color:#A6ACCD;">  │  │  │                                  │</span></span>
<span class="line"><span style="color:#A6ACCD;">  │ JRE │      JVM + Runtime Library       │</span></span>
<span class="line"><span style="color:#A6ACCD;">  │  │  │                                  │</span></span>
<span class="line"><span style="color:#A6ACCD;">  └─ └─ └──────────────────────────────────┘</span></span>
<span class="line"><span style="color:#A6ACCD;">        ┌───────┐┌───────┐┌───────┐┌───────┐</span></span>
<span class="line"><span style="color:#A6ACCD;">        │Windows││ Linux ││ macOS ││others │</span></span>
<span class="line"><span style="color:#A6ACCD;">        └───────┘└───────┘└───────┘└───────┘</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h4 id="jsr、jcp" tabindex="-1">JSR、JCP <a class="header-anchor" href="#jsr、jcp" aria-label="Permalink to &quot;JSR、JCP&quot;">​</a></h4><ul><li>JSR规范：Java Specification Request</li><li>JCP组织：Java Community Process</li></ul><p>为了保证Java语言的规范性，SUN公司搞了一个JSR规范，凡是想给Java平台加一个功能，比如说访问数据库的功能，大家要先创建一个JSR规范，定义好接口，这样，各个数据库厂商都按照规范写出Java驱动程序，开发者就不用担心自己写的数据库代码在MySQL上能跑，却不能跑在PostgreSQL上。</p><p>所以JSR是一系列的规范，从JVM的内存模型到Web程序接口，全部都标准化了。而负责审核JSR的组织就是JCP。</p><h4 id="ri、tck" tabindex="-1">RI、TCK <a class="header-anchor" href="#ri、tck" aria-label="Permalink to &quot;RI、TCK&quot;">​</a></h4><p>一个JSR规范发布时，为了让大家有个参考，还要同时发布一个“参考实现”，以及一个“兼容性测试套件”：</p><ul><li>RI：Reference Implementation</li><li>TCK：Technology Compatibility Kit</li></ul><p>比如有人提议要搞一个基于Java开发的消息服务器，这个提议很好啊，但是光有提议还不行，得贴出真正能跑的代码，这就是RI。如果有其他人也想开发这样一个消息服务器，如何保证这些消息服务器对开发者来说接口、功能都是相同的？所以还得提供TCK。</p><p>通常来说，RI只是一个“能跑”的正确的代码，它不追求速度，所以，如果真正要选择一个Java的消息服务器，一般是没人用RI的，大家都会选择一个有竞争力的商用或开源产品。</p><h3 id="_2-3-安装jdk" tabindex="-1">2.3 安装JDK <a class="header-anchor" href="#_2-3-安装jdk" aria-label="Permalink to &quot;2.3 安装JDK&quot;">​</a></h3><p>因为Java程序必须运行在JVM之上，所以，我们第一件事情就是安装JDK。</p><p>搜索JDK 21，确保从<a href="https://www.oracle.com/java/technologies/downloads/" target="_blank" rel="noreferrer">Oracle的官网</a>下载最新的稳定版JDK：</p><div class="language-ascii line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ascii</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">Linux  macOS  Windows</span></span>
<span class="line"><span style="color:#A6ACCD;">              -------</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">x64 Compressed Archive      Download</span></span>
<span class="line"><span style="color:#A6ACCD;">x64 Installer               Download</span></span>
<span class="line"><span style="color:#A6ACCD;">x64 MSI Installer           Download</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>选择合适的操作系统与安装包，找到Java SE 21的下载链接<code>Download</code>，下载安装即可。Windows优先选<code>x64 MSI Installer</code>，Linux和macOS要根据自己电脑的CPU是ARM还是x86选择合适的安装包。</p><h4 id="设置环境变量" tabindex="-1">设置环境变量 <a class="header-anchor" href="#设置环境变量" aria-label="Permalink to &quot;设置环境变量&quot;">​</a></h4><p>安装完JDK后，需要设置一个<code>JAVA_HOME</code>的环境变量，它指向JDK的安装目录。</p><p>然后，把<code>JAVA_HOME</code>的<code>bin</code>目录附加到系统环境变量<code>PATH</code>上。</p><p>把<code>JAVA_HOME</code>的<code>bin</code>目录添加到<code>PATH</code>中是为了在任意文件夹下都可以运行<code>java</code>。打开命令提示符窗口，输入命令<code>java -version</code>，如果一切正常，你会看到所安装的java的一些版本信息。如果你看到的版本号不是<code>21</code>，而是<code>15</code>、<code>1.8</code>之类，说明系统存在多个JDK，且默认JDK不是JDK 21，需要把JDK 21提到<code>PATH</code>前面。</p><h4 id="jdk" tabindex="-1">JDK <a class="header-anchor" href="#jdk" aria-label="Permalink to &quot;JDK&quot;">​</a></h4><p>细心的童鞋还可以在<code>JAVA_HOME</code>的<code>bin</code>目录下找到很多可执行文件：</p><ul><li>java：这个可执行程序其实就是JVM，运行Java程序，就是启动JVM，然后让JVM执行指定的编译后的代码；</li><li>javac：这是Java的编译器，它用于把Java源码文件（以<code>.java</code>后缀结尾）编译为Java字节码文件（以<code>.class</code>后缀结尾）；</li><li>jar：用于把一组<code>.class</code>文件打包成一个<code>.jar</code>文件，便于发布；</li><li>javadoc：用于从Java源码中自动提取注释并生成文档；</li><li>jdb：Java调试器，用于开发阶段的运行调试。</li></ul><h3 id="_2-4-第一个java程序" tabindex="-1">2.4 第一个Java程序 <a class="header-anchor" href="#_2-4-第一个java程序" aria-label="Permalink to &quot;2.4 第一个Java程序&quot;">​</a></h3><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// Hello.java</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Hello</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">String</span><span style="color:#89DDFF;">[]</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">args</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Hello, world!</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>在一个Java程序中，你总能找到一个类似：</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Hello</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">...</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>的定义，这个定义被称为class（类），这里的类名是<code>Hello</code>，大小写敏感，<code>class</code>用来定义一个类，<code>public</code>表示这个类是公开的，<code>public</code>、<code>class</code>都是Java的关键字，必须小写，<code>Hello</code>是类的名字，按照习惯，首字母<code>H</code>要大写。而花括号<code>{}</code>中间则是类的定义。</p><p>注意到类的定义中，我们定义了一个名为<code>main</code>的方法：</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">String</span><span style="color:#89DDFF;">[]</span><span style="color:#A6ACCD;"> args</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">...</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>方法是可执行的代码块，一个方法除了方法名<code>main</code>，还有用<code>()</code>括起来的方法参数，这里的<code>main</code>方法有一个参数，参数类型是<code>String[]</code>，参数名是<code>args</code>，<code>public</code>、<code>static</code>用来修饰方法，这里表示它是一个公开的静态方法，<code>void</code>是方法的返回类型，而花括号<code>{}</code>中间的就是方法的代码。</p><p>方法的代码每一行用<code>;</code>结束，这里只有一行代码，就是：</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Hello, world!</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>它用来打印一个字符串到屏幕上。</p><p><strong>Java规定，某个类定义的<code>public static void main(String[] args)</code>是Java程序的固定入口方法，因此，Java程序总是从<code>main</code>方法开始执行。</strong></p><p>注意到Java源码的缩进不是必须的，但是用缩进后，格式好看，很容易看出代码块的开始和结束，缩进一般是4个空格或者一个tab。</p><p>最后，当我们把代码保存为文件时，文件名必须是<code>Hello.java</code>，而且文件名也要注意大小写，因为要和我们定义的类名<code>Hello</code>完全保持一致。</p><h4 id="如何运行java程序" tabindex="-1">如何运行Java程序 <a class="header-anchor" href="#如何运行java程序" aria-label="Permalink to &quot;如何运行Java程序&quot;">​</a></h4><p>Java源码本质上是一个文本文件，我们需要先用<code>javac</code>把<code>Hello.java</code>编译成字节码文件<code>Hello.class</code>，然后，用<code>java</code>命令执行这个字节码文件<code>Hello</code>。因此，可执行文件<code>javac</code>是编译器，而可执行文件<code>java</code>就是虚拟机。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">javac</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">Hello.java</span></span>
<span class="line"><span style="color:#FFCB6B;">java</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">Hello</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h4 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-label="Permalink to &quot;小结&quot;">​</a></h4><ul><li>一个Java源码只能定义一个<code>public</code>类型的class，并且class名称和文件名要完全一致；</li><li>使用<code>javac</code>可以将<code>.java</code>源码编译成<code>.class</code>字节码；</li><li>使用<code>java</code>可以运行一个已编译的Java程序，参数是类名。</li></ul><h3 id="_2-5-java代码助手" tabindex="-1">2.5 Java代码助手 <a class="header-anchor" href="#_2-5-java代码助手" aria-label="Permalink to &quot;2.5 Java代码助手&quot;">​</a></h3><p>Java代码运行助手可以让你在线输入Java代码，然后远程运行后，在网页显示代码执行结果。（自行查找）</p><h3 id="_2-6-使用ide" tabindex="-1">2.6 使用IDE <a class="header-anchor" href="#_2-6-使用ide" aria-label="Permalink to &quot;2.6 使用IDE&quot;">​</a></h3><p>IDE是集成开发环境：Integrated Development Environment的缩写。</p><p>使用IDE的好处在于，可以把编写代码、组织项目、编译、运行、调试等放到一个环境中运行，能极大地提高开发效率。</p><p>IDE提升开发效率主要靠以下几点：</p><ul><li>编辑器的自动提示，可以大大提高敲代码的速度；</li><li>代码修改后可以自动重新编译，并直接运行；</li><li>可以方便地进行断点调试。</li></ul><p>目前，流行的用于Java开发的IDE有：</p><ul><li>Eclipse</li><li><strong>IntelliJ IDEA</strong>（推荐）</li></ul><h2 id="_3-java程序基础" tabindex="-1">3. Java程序基础 <a class="header-anchor" href="#_3-java程序基础" aria-label="Permalink to &quot;3. Java程序基础&quot;">​</a></h2><h3 id="_3-1-java程序基本结构" tabindex="-1">3.1 Java程序基本结构 <a class="header-anchor" href="#_3-1-java程序基本结构" aria-label="Permalink to &quot;3.1 Java程序基本结构&quot;">​</a></h3><p>我们先剖析一个完整的Java程序，它的基本结构是什么：</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Hello</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">String</span><span style="color:#89DDFF;">[]</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">args</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 向屏幕输出文本:</span></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Hello, world!</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;font-style:italic;">/* 多行注释开始</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">        注释内容</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">        注释结束 */</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// class定义结束</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h4 id="类、方法" tabindex="-1">类、方法 <a class="header-anchor" href="#类、方法" aria-label="Permalink to &quot;类、方法&quot;">​</a></h4><p>因为Java是面向对象的语言，一个程序的基本单位就是<code>class</code>，<code>class</code>是关键字，这里定义的<code>class</code>名字就是<code>Hello</code>。</p><p>类名要求：</p><ul><li>类名必须以英文字母开头，后接字母，数字和下划线的组合。</li><li>习惯以大写字母开头。</li></ul><p>注意到<code>public</code>是访问修饰符，表示该<code>class</code>是公开的。不写<code>public</code>，也能正确编译，但是这个类将无法从命令行执行。</p><p>在<code>class</code>内部，可以定义若干方法（method）。方法定义了一组执行语句，方法内部的代码将会被依次顺序执行。这里的方法名是<code>main</code>，返回值是<code>void</code>，表示没有任何返回值。</p><p>我们注意到<code>public</code>除了可以修饰<code>class</code>外，也可以修饰方法。而关键字<code>static</code>是另一个修饰符，它表示静态方法，后面我们会讲解方法的类型，目前，我们只需要知道，Java入口程序规定的方法必须是静态方法，方法名必须为<code>main</code>，括号内的参数必须是String数组。</p><p>方法名也有命名规则，命名和<code>class</code>一样，但是首字母小写。在方法内部，语句才是真正的执行代码。Java的每一行语句必须以分号结束。</p><h4 id="注释" tabindex="-1">注释 <a class="header-anchor" href="#注释" aria-label="Permalink to &quot;注释&quot;">​</a></h4><p>在Java程序中，注释是一种给人阅读的文本，不是程序的一部分，所以编译器会自动忽略注释。</p><p>Java有3种注释，第一种是单行注释，以双斜线开头，直到这一行的结尾结束；第二种多行注释以<code>/*</code>星号开头，以<code>*/</code>结束，可以有多行；还有一种特殊的多行注释，以<code>/**</code>开头，以<code>*/</code>结束，如果有多行，每行通常以星号开头。</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 这是注释...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/*</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">这是注释</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">这也是注释</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">*/</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * 可以用来自动创建文档的注释</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * @auther wen</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div>`,103),p=[t];function o(c,r,i,d,y,b){return l(),s("div",null,p)}const C=a(e,[["render",o]]);export{v as __pageData,C as default};
