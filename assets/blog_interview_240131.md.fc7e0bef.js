import{_ as a,c as n,o as e,V as t}from"./chunks/framework.35c8bad0.js";const k=JSON.parse('{"title":"面试题[微前端]","description":"","frontmatter":{"title":"面试题[微前端]","date":"2024-01-31T00:00:00.000Z"},"headers":[],"relativePath":"blog/interview/240131.md","lastUpdated":1711980833000}'),i={name:"blog/interview/240131.md"},r=t('<h1 id="面试题-微前端" tabindex="-1">面试题[微前端] <a class="header-anchor" href="#面试题-微前端" aria-label="Permalink to &quot;面试题[微前端]&quot;">​</a></h1><h2 id="_1-微前端如何实现作用域隔离" tabindex="-1">1. 微前端如何实现作用域隔离 <a class="header-anchor" href="#_1-微前端如何实现作用域隔离" aria-label="Permalink to &quot;1. 微前端如何实现作用域隔离&quot;">​</a></h2><p>微前端实现作用域隔离涉及解决三个核心问题：JavaScript隔离、样式隔离、元素隔离。以下是对这三个问题的详细解释：</p><ol><li><strong>JavaScript隔离：</strong> 在微前端框架中，JavaScript隔离是关键问题之一。它涉及到全局变量污染和事件冲突等情况。解决方法之一是使用沙箱（sandbox）机制。沙箱允许在一个独立的环境中运行程序，可以隔离当前执行环境的作用域和外部其他作用域，确保环境间不受影响。通过使用沙箱，可以实现对全局变量的隔离，避免不同子应用之间相互干扰的情况发生。</li><li><strong>样式隔离：</strong> 在微前端架构中，样式隔离是确保各个子应用之间样式不相互干扰的重要问题。一种常见的解决方案是使用Scoped CSS。Scoped CSS通过给样式选择器添加唯一的作用域属性，实现样式隔离。这样，每个子应用的样式规则只会作用于其自身的组件，不会影响到其他组件，从而保证了样式的独立性和隔离性。</li><li><strong>元素隔离：</strong> 元素隔离是指在微前端架构中确保各个子应用之间的DOM元素不会相互影响。这可以通过使用Web Component中的Shadow DOM来实现。Shadow DOM允许将一个独立的DOM子树附加到元素上，并且这个子树和主文档的DOM树是分开的，从而实现了DOM元素的隔离。每个子应用都可以拥有自己的Shadow DOM，确保了DOM结构的独立性和隔离性。</li></ol><p>综上所述，微前端实现作用域隔离需要解决JavaScript隔离、样式隔离和元素隔离这三个关键问题。通过使用沙箱机制、Scoped CSS和Shadow DOM等技术手段，可以有效地实现对代码、样式和DOM结构的隔离，确保各个子应用之间的独立性和稳定性。</p><h2 id="_2-在微前端技术选型的时候是如何考虑的" tabindex="-1">2. 在微前端技术选型的时候是如何考虑的 <a class="header-anchor" href="#_2-在微前端技术选型的时候是如何考虑的" aria-label="Permalink to &quot;2. 在微前端技术选型的时候是如何考虑的&quot;">​</a></h2><h2 id="_3-qiankun" tabindex="-1">3. qiankun <a class="header-anchor" href="#_3-qiankun" aria-label="Permalink to &quot;3. qiankun&quot;">​</a></h2><h3 id="_3-1-为什么选择-qiankun" tabindex="-1">3.1 为什么选择 qiankun <a class="header-anchor" href="#_3-1-为什么选择-qiankun" aria-label="Permalink to &quot;3.1 为什么选择 qiankun&quot;">​</a></h3><h3 id="_3-2-qiankun-的原理" tabindex="-1">3.2 qiankun 的原理 <a class="header-anchor" href="#_3-2-qiankun-的原理" aria-label="Permalink to &quot;3.2 qiankun 的原理&quot;">​</a></h3><h3 id="_3-3-qiankun-的不足之处" tabindex="-1">3.3 qiankun 的不足之处 <a class="header-anchor" href="#_3-3-qiankun-的不足之处" aria-label="Permalink to &quot;3.3 qiankun 的不足之处&quot;">​</a></h3><h3 id="_3-4-qiankun-的-javascript-沙箱和-css-沙箱原理是什么" tabindex="-1">3.4 qiankun 的 JavaScript 沙箱和 CSS 沙箱原理是什么 <a class="header-anchor" href="#_3-4-qiankun-的-javascript-沙箱和-css-沙箱原理是什么" aria-label="Permalink to &quot;3.4 qiankun 的 JavaScript 沙箱和 CSS 沙箱原理是什么&quot;">​</a></h3>',11),o=[r];function l(s,h,c,d,_,u){return e(),n("div",null,o)}const p=a(i,[["render",l]]);export{k as __pageData,p as default};
